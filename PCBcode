//I'm growing proud of this pcb code. It could prove truly useful after some more tweaking.
//I'll try out something with raspberry pi pico

//Input parameters
pinneavstand=2.54;
pinnebredde=0.8;
pinnelengde=0.8;
pinnehoyde=11;
pad=1.0;
trace=0.25;
hullradius=0.4;
sjusegmentlengde=17.5;
sjusegmentbredde=12.5;
pothoyde=5;
potradius=7.5;
klaring=0.3;
offsetY=0;
offsetX=0;
detail=5;
ramme=0.6;
heigth=51;
width=21;
//components input, center x, y and rotation, then pins
potone=[
[-14,-28,0],[potradius+1,-2*pinneavstand],[-potradius, 0],[potradius+1,2*pinneavstand]];
sevensone=[
[10,-27,0],[-sjusegmentlengde/2+1,-2*pinneavstand],[-sjusegmentlengde/2+1,-pinneavstand],[-sjusegmentlengde/2+1,+pinneavstand],[-sjusegmentlengde/2+1,+2*pinneavstand],[sjusegmentlengde/2-1,+2*pinneavstand],[sjusegmentlengde/2-1,+pinneavstand],[sjusegmentlengde/2-1,-pinneavstand],[sjusegmentlengde/2-1,-2*pinneavstand]];
sevenstwo=[
[10,-27+sjusegmentbredde,0],[-sjusegmentlengde/2+1,-2*pinneavstand],[-sjusegmentlengde/2+1,-pinneavstand],[-sjusegmentlengde/2+1,+pinneavstand],[-sjusegmentlengde/2+1,+2*pinneavstand],[sjusegmentlengde/2-1,+2*pinneavstand],[sjusegmentlengde/2-1,+pinneavstand],[sjusegmentlengde/2-1,-pinneavstand],[sjusegmentlengde/2-1,-2*pinneavstand] ];
arduino=[
[offsetX, offsetY, 0],[-25,-32],[25,-32],[25,-32+8.5*pinneavstand]
];
DPAK=[
[0, 15, -90],[-6.7/2,0],[1.8+1.5,2.30],[1.8+1.5,-2.30]
];
osixothree=[
[5, 15, 0],[0.7/2+0.8/2,0],[-0.7/2-0.8/2,0]
];
pico=[
[0, 0, 0],[-17.78/2,48.26/2],[-17.78/2,48.26/2-2.54*1],[-17.78/2,48.26/2-2.54*2],[-17.78/2,48.26/2-2.54*3],[-17.78/2,48.26/2-2.54*4],[-17.78/2,48.26/2-2.54*5],[-17.78/2,48.26/2-2.54*6],[-17.78/2,48.26/2-2.54*7],[-17.78/2,48.26/2-2.54*8],[-17.78/2,48.26/2-2.54*9],[-17.78/2,48.26/2-2.54*10],[-17.78/2,48.26/2-2.54*11],[-17.78/2,48.26/2-2.54*12],[-17.78/2,48.26/2-2.54*13],[-17.78/2,48.26/2-2.54*14],[-17.78/2,48.26/2-2.54*15],[-17.78/2,48.26/2-2.54*16],[-17.78/2,48.26/2-2.54*17],[-17.78/2,48.26/2-2.54*18],[-17.78/2,48.26/2-2.54*19],[17.78/2,48.26/2-2.54*19],[17.78/2,48.26/2-2.54*18],[17.78/2,48.26/2-2.54*17],[17.78/2,48.26/2-2.54*16],[17.78/2,48.26/2-2.54*15],[17.78/2,48.26/2-2.54*14],[17.78/2,48.26/2-2.54*13],[17.78/2,48.26/2-2.54*12],[17.78/2,48.26/2-2.54*11],[17.78/2,48.26/2-2.54*10],[17.78/2,48.26/2-2.54*9],[17.78/2,48.26/2-2.54*8],[17.78/2,48.26/2-2.54*7],[17.78/2,48.26/2-2.54*6],[17.78/2,48.26/2-2.54*5],[17.78/2,48.26/2-2.54*4],[17.78/2,48.26/2-2.54*3],[17.78/2,48.26/2-2.54*2],[17.78/2,48.26/2-2.54*1],[17.78/2,48.26/2],[-2.54,-51/2+1.6],[0,-51/2+1.6],[2.54,-51/2+1.6]];
rp2040=[[0,0,0],[-7.75/2,0],[0,7.75/2],[7.75/2,0],[0,-7.75/2]];//3.20 square and [-2.6:0.4:2.6]1*.2mmstrip
pinplacement=[
[-25,-32],[25,-32],[25,-32+8.5*pinneavstand]];
groundtr=[[arduino[2][0],arduino[2][1]+pinneavstand*(8.5+4)],
[5,-12],
[5,-18],
[sevensone[0][0]-((sjusegmentlengde/2)-1),sevenstwo[0][1]-offsetY,sevensone[0][0]-((sjusegmentlengde/2))-offsetY],
[sevensone[0][0]+((sjusegmentlengde/2)-1),sevenstwo[0][1]-offsetY,sevensone[0][0]-((sjusegmentlengde/2))-offsetY],
[15,-21],
[15,-31],
[sevensone[0][0]+((sjusegmentlengde/2)-1),sevensone[0][1]-offsetY,sevensone[0][0]-((sjusegmentlengde/2))-offsetY],
[sevensone[0][0]-((sjusegmentlengde/2)-1),sevensone[0][1]-offsetY,sevensone[0][0]-((sjusegmentlengde/2)+1.6)-offsetY],
[sevensone[0][0]-((sjusegmentlengde/2)+1.6),sevensone[0][1]-offsetY],
[potone[0][0]+potradius+1,potone[0][1]-2*pinneavstand-offsetY]];
areftr=[[arduino[2][0],arduino[2][1]+pinneavstand*(8.5+7)],
[-1.8,-32+pinneavstand*9.3],
[-3,-32+pinneavstand*9-offsetY],
[potone[0][0]+potone[3][0],potone[0][1]+potone[3][1]]];
ain5tr=[
[potone[0][0]+potone[2][0],potone[0][1]],[pinplacement[0][0],pinplacement[0][1]]];
tracepads=[
[1],[1],[0,0],[0,0],[0,1],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,1],];
//  MAIN  code starts here where various modules are called
//This is where we duplicate the circuit
color("black")
    for (b=[0:180:180]){
       //rotate([0,0,b]){
        translate([offsetX,offsetY,0])
traces();
difference(){
//copperclad(); 
rp20footprint(offsetX,offsetY,0);    
textlabel();  
color("white")roomfortraces();                
}
//}
}
//pins();
//arduinoUno();
//shield();
//spacers();
//potmeter(potone[0][0],potone[0][1],potone[0][2]);
//sevensegment(sevensone[0]);
//sevensegment(sevenstwo[0]);
border();
DPAK3V3(DPAK[0][0],DPAK[0][1],DPAK[0][2]);
o6o3(osixothree[0][0],osixothree[0][1],osixothree[0][2]);//100nF SMD on Vin
o6o3(osixothree[0][0],osixothree[0][1]-3,osixothree[0][2]);//10uF SMD on Vout

//   ****            MODULES       ****
module o6o3(x,y,rotation){
   color("black") translate([x,y,0])rotate([0,0,rotation])linear_extrude(2){
        translate([osixothree[1][0],osixothree[1][1],0])square(0.8,center=true);
        translate([osixothree[2][0],osixothree[2][1],0])square(0.8,center=true);
}}
module DPAK3V3(x,y,rotation){
   color("black") translate([x,y,0])rotate([0,0,rotation])linear_extrude(2){
        translate([DPAK[1][0],DPAK[1][1],0])square(6.7,center=true);
        translate([DPAK[2][0],DPAK[2][1],0])square([3,1.6],center=true);
        translate([DPAK[3][0],DPAK[3][1],0])square([3,1.6],center=true);
}}
module rp20footprint(x,y,rotation){
    translate([x,y,0])rotate([0,0,rotation])linear_extrude(2){
        square(3.2,center=true);
        for(a=[0:90:359]){
        for (b=[2.6:-0.4:-2.6]){
            rotate([0,0,a])translate([7.26/2,b,0])square([1,0.2],center=true);rotate([0,0,a+180])translate([7.26/2-0.7,b,0])rotate([0,0,-a+180])translate([-0.1,-0.1,0])text(str((a/90)*14+((b+2.6)/0.4)+1),0.15);
        }
    }
    translate([-7.26/2,7.26/2,0])circle(0.3);
    }
}
module spacers(){
    difference(){
    union(){
    translate([pinplacement[0][0],pinplacement[0][1],-0.5])cube(3,center=true);
    translate([arduino[3][0],arduino[3][1]-2,-0.5])cube([3,pinneavstand*17,3],center=true);
}
pins();
}
}
module traces () {
color("black")
{    
    
 for (n=[1:1:len(pico)/2-2]){
    bane(pico[0][0]+pico[n][0],pico[0][1]+pico[n][1],pico[0][0]+pico[n][0]+0.15*sqrt(abs(pico[0][1]+pico[n][1])*abs(pico[0][1]+pico[n][1])+abs(pico[0][0]+pico[n][0])*abs(pico[0][0]+pico[n][0])),pico[0][1]+pico[n][1],1,0);
}
for (o=[len(pico)/2-1:1:len(pico)-4]){
    bane(pico[0][0]+pico[o][0],pico[0][1]+pico[o][1],pico[0][0]+pico[o][0]-0.15*sqrt(abs(pico[0][1]+pico[o][1])*abs(pico[0][1]+pico[o][1])+abs(pico[0][0]+pico[o][0])*abs(pico[0][0]+pico[o][0])),pico[0][1]+pico[o][1],1,0);
}
   for(a=[0:90:359]){
        for (b=[2.6:-0.4:-2.6]){
            rotate([0,0,a])translate([7.26/2+0.2,b,0])bane(rp2040[1][1],rp2040[1][1],rp2040[1][1]+2-abs(b)*0.6,rp2040[1][1]+0,0,0);
        }
    }
//traces in numerical order 
bane(-5.0,pico[1][1],-5.2,pico[6][1],0,0); 
bane(-5.2,pico[6][1],rp2040[0][0]-4.49,rp2040[0][1]+2.2,0,0);
bane(-5.33,pico[2][1],-5.55,pico[6][1],0,0); 
bane(-5.55,pico[6][1],rp2040[0][0]-4.74,rp2040[0][1]+1.8,0,0);
bane(-6.13,pico[4][1],-6.03,pico[6][1],0,0); 
bane(-6.03,pico[6][1],rp2040[0][0]-4.98,rp2040[0][1]+1.4,0,0);
bane(-6.43,pico[5][1],-6.23,pico[7][1],0,0); 
bane(-6.23,pico[7][1],rp2040[0][0]-5.22,rp2040[0][1]+1,0,0);     
bane(-6.73,pico[6][1],-6.5,pico[8][1],0,0); 
bane(-6.5,pico[8][1],rp2040[0][0]-5.45,rp2040[0][1]+0.6,0,0);   
bane(-7.0,pico[7][1],-6.8,pico[9][1],0,0);
bane(-6.8,pico[9][1],rp2040[0][0]-5.7,rp2040[0][1]+0.2,0,0);
bane(-7.45,pico[9][1],rp2040[0][0]-5.9,rp2040[0][1]-0.2,0,0);
bane(rp2040[0][0]-5.9,rp2040[0][1]-0.2,rp2040[0][0]-5.3,rp2040[0][1]-0.2,0,0);        
bane(-7.55,pico[10][1],rp2040[0][0]-6.5,rp2040[0][1]+0.2,0,0);
bane(rp2040[0][0]-6.5,rp2040[0][1]+0.2,rp2040[0][0]-6.1,rp2040[0][1]-0.6,0,0);
bane(rp2040[0][0]-6.1,rp2040[0][1]-0.6,rp2040[0][0]-5.3,rp2040[0][1]-0.6,0,0);    
bane(-7.4,pico[10][1]-1.4,rp2040[0][0]-6.2,rp2040[0][1]-1.0,2,0);
bane(rp2040[0][0]-6.2,rp2040[0][1]-1.0,rp2040[0][0]-5.3,rp2040[0][1]-1.0,0,0);
bane(-7.55,pico[11][1],rp2040[0][0]-4.99,rp2040[0][1]-1.4,0,0);
bane(rp2040[0][0]-4.7,rp2040[0][1]-1.8,-7.45,pico[12][1],0,0);
bane(rp2040[0][0]-4.5,rp2040[0][1]-2.2,-6.9,pico[14][1],0,0);
bane(rp2040[0][0]-4.25,rp2040[0][1]-2.6,-6.65,pico[15][1],0,0);    
bane(rp2040[0][0]-2.6,rp2040[0][1]-4.3,-6.35,pico[16][1],0,0);
bane(rp2040[0][0]-2.2,rp2040[0][1]-4.5,-5.95,pico[17][1],0,0);
bane(rp2040[0][0]-1.8,rp2040[0][1]-4.7,-5.4,pico[19][1],0,0);    
bane(rp2040[0][0]-1.4,rp2040[0][1]-4.8,-5,pico[20][1],0,0);
bane(rp2040[0][0]-1.0,rp2040[0][1]-4.8,rp2040[0][0]-1.0,pico[13][1],0,0);

bane(rp2040[0][0]+1.0,rp2040[0][1]-4.8,1.5,pico[41][1]+4,0,0);
bane(1.5,pico[41][1]+4,pico[41][0],pico[41][1],0,1);
bane(0,pico[42][1]+1.6,0,pico[42][1],0,1);
bane(rp2040[0][0]+1.4,rp2040[0][1]-4.8,pico[43][0],pico[43][1],0,1);
  
bane(rp2040[0][0]+1.8,rp2040[0][1]-4.8,rp2040[0][0]+1.9,pico[13][1],0,0);
bane(rp2040[0][0]+2.2,rp2040[0][1]-4.5,pico[21][0]-3.9,pico[21][1],0,0); 
bane(rp2040[0][0]+2.6,rp2040[0][1]-4.3,pico[22][0]-3.5,pico[22][1],0,0);
bane(rp2040[0][1]+4.25,rp2040[0][0]-2.6,pico[24][0]-2.9,pico[24][1],0,0);
bane(rp2040[0][1]+4.53,rp2040[0][0]-2.2,pico[25][0]-2.5,pico[25][1],0,0);
bane(rp2040[0][1]+4.8,rp2040[0][0]-1.8,pico[26][0]-2.2,pico[26][1],0,0);
bane(rp2040[0][1]+5,rp2040[0][0]-1.4,pico[27][0]-1.9,pico[27][1],0,0);
bane(rp2040[0][1]+5.25,rp2040[0][0]-1.0,pico[29][0]-2.0,pico[29][1]-1,0,2);
bane(rp2040[0][1]+5.5,rp2040[0][0]-0.6,pico[29][0]-1.5,pico[29][1],0,0);

bane(pico[31][0]-1.4,pico[31][1],rp2040[0][1]+5.25,rp2040[0][0]+1,0,0);
bane(pico[32][0]-1.5,pico[32][1],rp2040[0][1]+5.0,rp2040[0][0]+1.4,0,0);
bane(pico[34][0]-1.9,pico[34][1],rp2040[0][1]+4.8,rp2040[0][0]+1.8,0,0);
    }     
    }
module roomfortraces () {
     translate([offsetX,offsetY,0])
      color("black")
{   for (m=[0:pinneavstand:pinneavstand*5])
    {
baneplass(arduino[2][0],arduino[2][1]+m,arduino[2][0]-3,arduino[2][1]+m,1,1);
baneplass(arduino[3][0],arduino[3][1]+m,arduino[3][0]-3,arduino[3][1]+m-1.8,1,1);
baneplass(arduino[2][0],arduino[2][1]+pinneavstand*7,arduino[2][0]-3,arduino[2][1]+pinneavstand*7,1,1);
baneplass(arduino[2][0],arduino[2][1]+pinneavstand*6,arduino[2][0]-3,arduino[2][1]+pinneavstand*6,1,1);     
}
for (n=[1:1:len(sevensone)-1]){
    baneplass(sevensone[0][0]+sevensone[n][0],sevensone[0][1]+sevensone[n][1],sevensone[0][0]+sevensone[n][0]*1.25,sevensone[0][1]+sevensone[n][1],1,1);
     baneplass(sevenstwo[0][0]+sevenstwo[n][0],sevenstwo[0][1]+sevenstwo[n][1],sevenstwo[0][0]+sevenstwo[n][0]*1.25,sevenstwo[0][1]+sevenstwo[n][1],1,1);
 }
    //Ground-traces in copper clad
    for (o=[1:1:len(groundtr)-1]){
    baneplass(groundtr[o-1][0],groundtr[o-1][1]+offsetY,groundtr[o][0],groundtr[o][1]+offsetY,0,0);
}   
     }
    //aref-pin trace in copper clad
for (l=[1:1:len(areftr)-1]){
    baneplass(areftr[l-1][0],areftr[l-1][1]+offsetY,areftr[l][0],areftr[l][1]+offsetY,1,1);
}
//A5 analog input from the potmeter in copper clad
    baneplass(ain5tr[0][0],ain5tr[0][1]+offsetY,ain5tr[1][0],ain5tr[1][1]+offsetY,1,1);
    }
module border(){
 translate([0,0,2])color("black")difference(){
cube([width+3*ramme,heigth+3*ramme,2],center=true);
cube([width-ramme,heigth-ramme,4],center=true);
}  
}
module pins () {
   for (i=[0:pinneavstand:pinneavstand*7])
    {
    translate([arduino[2][0],arduino[2][1]+i,0])pinne();
    translate([arduino[3][0],arduino[3][1]+i,0])pinne();
    translate([pinplacement[0][0],pinplacement[0][1],0])pinne();  
 }    
 }
module arduinoUno () {
    translate([offsetX,offsetY,-5])color("green")cube([53,68,2],center=true);  
    }
module textlabel() {
      translate([offsetX,offsetY-2,-1])linear_extrude(6){
translate([-04.9,-11.6])rotate([0,0,37])mirror([1,0,0])text("Labels in copper",2.85);
translate([-06,-19])rotate([0,0,36])mirror([1,0,0])text("label",4.4);
translate([-1,-22])rotate([0,0,36])mirror([1,0,0])text("info",2.35);
translate([+14,-15.5])rotate([0,0,0])mirror([1,0,0])text("label:",1.6);}
}
module shield (){
 translate([offsetX,offsetY,1])color("pink")linear_extrude(2)polygon([[27,15],[27,-34],[-27,-34],[-27,-26]]);  
}
module copperclad (){
translate([0,0-2,2])color("black")linear_extrude(1)polygon([[26,17+5.3],[26,-32+5.3],[-26,-32+5.3],[-26,-24+5.3]]);  
}
module sevensegment(x,y,rotation){
translate([x,y,0])rotate([0,0,rotation]){
   for (k=[1:1:len(sevensone)-1]){    
  translate([0,0,6])color("white")cube([sjusegmentlengde,sjusegmentbredde,pothoyde],center=true);
          translate([sevensone[k],3])pinne();              
}
}
}

module potmeter(x,y,rotation){
    translate([x,y,0])rotate([0,0,rotation]){
 color("black")translate([0,0,6])cylinder(pothoyde,potradius,potradius,center=true);
  translate([-potradius,0,3])pinne();
  translate([potradius+1,2*pinneavstand,3])pinne();
  translate([potradius+1,-2*pinneavstand,3])pinne();  
}}

//The two last arguments in "bane" is 1 for pad or 0 for via at start and end of trace
module bane(startx,starty,sluttx,slutty,startpad,endpad){
  difference(){
     union(){
         translate([0,0,1]) linear_extrude(1){
        if (startpad==1)translate([startx,starty,0])rotate([0,0,360/(4*detail)])circle(pad, $fn=detail);
            if (startpad==2)translate([startx,starty,0])rotate([0,0,360/(4*detail)])circle(pad*0.75, $fn=detail);
       if (endpad==1)translate([sluttx,slutty,0])rotate([0,0,360/(4*detail)])circle(pad, $fn=detail);
    if (endpad==2)translate([sluttx,slutty,0])rotate([0,0,360/(4*detail)])circle(pad*0.75, $fn=detail);   
    translate([startx+(sluttx-startx)/2,starty+(slutty-starty)/2,-3])rotate([0,0,90+asin((sluttx-startx)/sqrt((sluttx-startx)*(sluttx-startx)+(slutty-starty)*(slutty-starty)))])square([sqrt((sluttx-startx)*(sluttx-startx)+(slutty-starty)*(slutty-starty)),trace],center=true);
if (startpad==0)translate([startx,starty,1])circle(trace/2);
if (endpad==0)translate([sluttx,slutty,1])circle(trace/2);
    }
}
if (startpad==1)  translate([startx,starty,0])rotate([0,0,360/(4*detail)])cylinder(15,hullradius,hullradius,center=true );
if (endpad==1) translate([sluttx,slutty,0])rotate([0,0,360/(4*detail)])cylinder(15,hullradius,hullradius,center=true );
 if (startpad==2)  translate([startx,starty,0])rotate([0,0,360/(4*detail)])cylinder(15,hullradius,hullradius,center=true );
if (endpad==2) translate([sluttx,slutty,0])rotate([0,0,360/(4*detail)])cylinder(15,hullradius,hullradius,center=true );   
}
}
module baneplass(startx,starty,sluttx,slutty,startpad,endpad){
  difference(){
     union(){
         translate([0,0,1]) linear_extrude(5){
        if (startpad==1)translate([startx,starty,0])rotate([0,0,360/(4*detail)])circle(pad+klaring, $fn=detail);
       if (endpad==1)translate([sluttx,slutty,0])rotate([0,0,360/(4*detail)])circle(pad+klaring, $fn=detail);
       
    translate([startx+(sluttx-startx)/2,starty+(slutty-starty)/2,-3])rotate([0,0,90+asin((sluttx-startx)/sqrt((sluttx-startx)*(sluttx-startx)+(slutty-starty)*(slutty-starty)))])square([sqrt((sluttx-startx)*(sluttx-startx)+(slutty-starty)*(slutty-starty)),pad+2*klaring],center=true);
if (startpad==0)translate([startx,starty,1])circle(pad/2+klaring);
if (endpad==0)translate([sluttx,slutty,1])circle(pad/2+klaring);
    }
}
}
}
module pinne (){
 color("silver")cube([pinnebredde,pinnebredde,pinnehoyde],center=true);  
}
