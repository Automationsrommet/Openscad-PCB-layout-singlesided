 //Here is my postapocalyptical pico, made mostly with parts I have on hand.
//The goal is that one should be able to alter it to meet needs. It is not there yet.
//Todo: Chekt if th DPAK even fits. Write 4 trace-functions into one smooth curve. Angle everything. ground points #3.

//Input parameters

pad=1.0;
trace=0.23;
holeradius=0.2;
clearance=0.2;
offsetY=0;
offsetX=0;
detail=5;
frame=0.6;
heigth=51;
width=21;
//components input, center x, y and rotation, then pins

chryst=[
[-1,-18,0],[-1.15,-0.95],[1.15,-0.95],[1.15,0.95],[-1.15,0.95]];
DPAK=[
[-1.5, 17, 90],[-6.7/2,0],[1.8+1.5,2.30],[1.8+1.5,-2.30]
];
homebrusb=[
[0, 51/2-1.6, 0],[-2.54*1.5,0],
[-2.54*0.5,0],[2.54*0.5,0],[2.54*1.5,0]
];
osixothree=[
[0, 0, 0],[0.7/2+0.8/2,0],[-0.7/2-0.8/2,0]
];
pico=[
[0, 0, 0],[-17.78/2,48.26/2],[-17.78/2,48.26/2-2.54*1],[-17.78/2,48.26/2-2.54*2],[-17.78/2,48.26/2-2.54*3],[-17.78/2,48.26/2-2.54*4],[-17.78/2,48.26/2-2.54*5],[-17.78/2,48.26/2-2.54*6],[-17.78/2,48.26/2-2.54*7],[-17.78/2,48.26/2-2.54*8],[-17.78/2,48.26/2-2.54*9],[-17.78/2,48.26/2-2.54*10],[-17.78/2,48.26/2-2.54*11],[-17.78/2,48.26/2-2.54*12],[-17.78/2,48.26/2-2.54*13],[-17.78/2,48.26/2-2.54*14],[-17.78/2,48.26/2-2.54*15],[-17.78/2,48.26/2-2.54*16],[-17.78/2,48.26/2-2.54*17],[-17.78/2,48.26/2-2.54*18],[-17.78/2,48.26/2-2.54*19],[17.78/2,48.26/2-2.54*19],[17.78/2,48.26/2-2.54*18],[17.78/2,48.26/2-2.54*17],[17.78/2,48.26/2-2.54*16],[17.78/2,48.26/2-2.54*15],[17.78/2,48.26/2-2.54*14],[17.78/2,48.26/2-2.54*13],[17.78/2,48.26/2-2.54*12],[17.78/2,48.26/2-2.54*11],[17.78/2,48.26/2-2.54*10],[17.78/2,48.26/2-2.54*9],[17.78/2,48.26/2-2.54*8],[17.78/2,48.26/2-2.54*7],[17.78/2,48.26/2-2.54*6],[17.78/2,48.26/2-2.54*5],[17.78/2,48.26/2-2.54*4],[17.78/2,48.26/2-2.54*3],[17.78/2,48.26/2-2.54*2],[17.78/2,48.26/2-2.54*1],[17.78/2,48.26/2],[-2.54,-51/2+1.6],[0,-51/2+1.6],[2.54,-51/2+1.6]
];
rp2040=[
[0,0,-30],
[-7.75/2,+2.6],[-7.75/2,+2.2],[-7.75/2,1.8],[-7.75/2,1.4],[-7.75/2,1.0],[-7.75/2,0.6],[-7.75/2,0.2],[-7.75/2,-0.2],[-7.75/2,-0.6],[-7.75/2,-1],[-7.75/2,-1.4],[-7.75/2,-1.8],[-7.75/2,-2.2],[-7.75/2,-2.6],
[-2.6,-7.75/2],[-2.2,-7.75/2],[-1.8,-7.75/2],[-1.4,-7.75/2],[-1,-7.75/2],[-0.6,-7.75/2],[-0.2,-7.75/2],[0.2,-7.75/2],[0.6,-7.75/2],[1,-7.75/2],[1.4,-7.75/2],[1.8,-7.75/2],[2.2,-7.75/2],[2.6,-7.75/2],
[7.75/2,-2.6],[7.75/2,-2.2],[7.75/2,-1.8],[7.75/2,-1.4],[7.75/2,-1],[7.75/2,-0.6],[7.75/2,-0.2],[7.75/2,0.2],[7.75/2,0.6],[7.75/2,1],[7.75/2,1.4],[7.75/2,1.8],[7.75/2,2.2],[7.75/2,2.6],
[2.6,7.75/2],[2.2,7.75/2],[1.8,7.75/2],[1.4,7.75/2],[1.0,7.75/2],[0.6,7.75/2],[0.2,7.75/2],[-0.2,7.75/2],[-0.6,7.75/2],[-1,7.75/2],[-1.4,7.75/2],[-1.8,7.75/2],[-2.2,7.75/2],[-2.6,7.75/2]];
spiflash16mb=[
[-1,9,0],[-3/2,0.75],[-3/2,0.25],[-3/2,-0.25],[-3/2,-0.75],[3/2,-0.75],[3/2,-0.25],[3/2,0.25],[3/2,0.75]];
sot523=[
[5,3.8,48],[-0.5,-1.29/2],[0,1.29/2],[0.5,-1.29/2]];

//  MAIN  code starts here where various modules are called

difference(){
//copperclad(); 
   
color("white")union(){
   

rp20footprint(offsetX,offsetY,rp2040[0][2],clearance);    
usbb(homebrusb[0][0],homebrusb[0][1],homebrusb[0][2],"Homemade","USB-B",clearance);
DPAK3V3(DPAK[0][0],DPAK[0][1],DPAK[0][2],clearance);
o6o3(5.3,12,0,clearance," ");
o6o3(5.3,13,0,clearance," ");
o6o3(-2-0.1,21.1,90,clearance,"100n");
o6o3(-0.5-0.1,21.1,90,clearance,"10u");
spiflash(spiflash16mb[0][0],spiflash16mb[0][1],spiflash16mb[0][2],"SPIFLASH","16Mb",clearance);
chrystal(chryst[0][0],chryst[0][1],chryst[0][2],clearance);
o6o3(chryst[0][0]+chryst[3][0]-1.9,chryst[0][1]+chryst[3][1]+2,90,clearance,"R1k");
o6o3(chryst[0][0]+chryst[1][0]-0.5,chryst[0][1]+chryst[1][1]-2,90,clearance,"15p");
o6o3(chryst[0][0]+chryst[1][0]+0.5,chryst[0][1]+chryst[1][1]-2,90,clearance,"15p");
o6o3(rp2040[0][0]+rp2040[3][0]+2.9,rp2040[0][1]+rp2040[3][1]+1.75,46,clearance,"470");
o6o3(rp2040[0][0]+rp2040[3][0]+3.8,rp2040[0][1]+rp2040[3][1]+0.4,-44,clearance,"LED");
o6o3(rp2040[0][0]+rp2040[3][0]+2.7,rp2040[0][1]+rp2040[3][1]-0.5,101,clearance,"23 24");
sot(sot523[0][0],sot523[0][1],sot523[0][2],clearance);
o6o3(sot523[0][0]+sot523[3][0]+0.8,sot523[0][1]+sot523[3][1]+3.4,90,clearance,"100k");
o6o3(sot523[0][0]+sot523[3][0]-0.1,sot523[0][1]+sot523[3][1]+3.4,90,clearance,"1nF");
o6o3(sot523[0][0]+sot523[3][0]-1,sot523[0][1]+sot523[3][1]+2.6,90,clearance,"200k");
o6o3(pico[0][0]+pico[35][0]-1.4,pico[0][1]+pico[35][1]+1.1,90,clearance,"200");
o6o3(pico[0][0]+pico[35][0]-1.5,pico[0][1]+pico[35][1]-1.1,90,clearance,"2u2");
o6o3(pico[0][0]+pico[35][0]-2.5,pico[0][1]+pico[35][1]-1.1,90,clearance,"1ohm");
o6o3(sot523[0][0]+sot523[3][0]-1,sot523[0][1]+sot523[3][1]+2.6,90,clearance,"200k");
o6o3(2.8,11.7,90,clearance,"100n");
o6o3(2.8,15.9,100,clearance,"100n");   
label(2.2,17.5,90,0,"Postapocalyptical", 0.35,"Courier");
label(3.4,18,93,0,"Pico", 1,"Courier");
label(4.5,18,98,0,"open hardware", 0.4,"Courier");
label(3.8,17.9,95,0,"version 1 Melbu april22", 0.23,"Courier");
}}

color("blac k")union(){
//track parameters:
// startcompx,startcompy,startrotation,startx,starty,starttype,startdivider,startpad,
//endcompx,endcompy,endrotation,endx,endy,endtype,enddivider,endpad,room

track(pico[0][0],pico[0][1],pico[0][2],pico[1][0],pico[1][1],1,4,2,pico[0][0],pico[0][1],pico[0][2],pico[26][0],pico[26][1],1,4,2,0);
track(pico[0][0],pico[0][1],pico[0][2],pico[5][0],pico[5][1],1,3,2,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[1][0],rp2040[1][1],0,3,2,0);
track(rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[50][0],rp2040[50][1],1,3,2,pico[0][0],pico[0][1],pico[0][2],pico[35][0],pico[35][1],0,3,2,0);
    
    track(rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[29][0],rp2040[29][1],1,3,2,pico[0][0],pico[0][1],pico[0][2],pico[21][0],pico[21][1],0,3,2,0);
    
    
border();
rp20footprint(offsetX,offsetY,rp2040[0][2],0);
usbb(homebrusb[0][0],homebrusb[0][1],homebrusb[0][2],"Homemade","USB-B",0);
DPAK3V3(DPAK[0][0],DPAK[0][1],DPAK[0][2],0);
o6o3(5.3,12,0,0," ");
o6o3(5.3,13,0,0," ");
o6o3(-2-0.1,21.1,90,0,"100n");
o6o3(-0.5-0.1,21.1,90,0,"10u");
spiflash(spiflash16mb[0][0],spiflash16mb[0][1],spiflash16mb[0][2],"SPIFLASH","16Mb",0);
chrystal(chryst[0][0],chryst[0][1],chryst[0][2],0);
o6o3(chryst[0][0]+chryst[3][0]-1.9,chryst[0][1]+chryst[3][1]+2,90,0,"R1k");
o6o3(chryst[0][0]+chryst[1][0]-0.5,chryst[0][1]+chryst[1][1]-2,90,0,"15p");
o6o3(chryst[0][0]+chryst[1][0]+0.5,chryst[0][1]+chryst[1][1]-2,90,0,"15p");
o6o3(rp2040[0][0]+rp2040[3][0]+2.9,rp2040[0][1]+rp2040[3][1]+1.75,46,0,"470");
o6o3(rp2040[0][0]+rp2040[3][0]+3.8,rp2040[0][1]+rp2040[3][1]+0.4,-44,0,"LED");
o6o3(rp2040[0][0]+rp2040[3][0]+2.7,rp2040[0][1]+rp2040[3][1]-0.5,101,0,"23 24");
sot(sot523[0][0],sot523[0][1],sot523[0][2],0);
o6o3(sot523[0][0]+sot523[3][0]+0.8,sot523[0][1]+sot523[3][1]+3.4,90,0,"100k");
o6o3(sot523[0][0]+sot523[3][0]-0.1,sot523[0][1]+sot523[3][1]+3.4,90,0,"1nF");
o6o3(sot523[0][0]+sot523[3][0]-1,sot523[0][1]+sot523[3][1]+2.6,90,0,"200k");
o6o3(pico[0][0]+pico[35][0]-1.4,pico[0][1]+pico[35][1]+1.1,90,0,"200");
o6o3(pico[0][0]+pico[35][0]-1.5,pico[0][1]+pico[35][1]-1.1,90,0,"2u2");
o6o3(pico[0][0]+pico[35][0]-2.5,pico[0][1]+pico[35][1]-1.1,90,0,"1ohm");
o6o3(sot523[0][0]+sot523[3][0]-1,sot523[0][1]+sot523[3][1]+2.6,90,0,"200k");
o6o3(2.8,11.7,90,0,"100n");
o6o3(2.8,15.9,100,0,"100n");
}    

//   ****            MODULES       ****
module track (startcompx,startcompy,srotation,spinx,spiny,starttype,startdivider,startpad,endcompx,endcompy,erotation,epinx,epiny,endtype,enddivider,endpad,room) {
    color("red")translate([startcompx,startcompy,0])rotate([0,0,srotation])translate([spinx,spiny,0])cylinder(5,0.3,0.3,center=true);
    color("green")translate([endcompx,endcompy,0])rotate([0,0,erotation])translate([epinx,epiny,0])cylinder(5,0.3,0.3,center=true);
   
    startx=startcompx+spinx+sqrt(spinx*spinx+spiny*spiny)*-1.95*(cos((180-srotation)/2));
    
    starty=startcompy+spiny+sqrt(spinx*spinx+spiny*spiny)*-0.23*sin((-180+srotation));
 
    endx=endcompx+epinx+sqrt(spinx*spinx+spiny*spiny)*-0.42*cos((-180+erotation)/2);
    
    endy=endcompy+epiny+sqrt(spinx*spinx+spiny*spiny)*-0.38*sin((erotation)/2);
   
    startendx=startx+(endx-startx)/2;
    startendy=starty+(endy-starty)/2;
    incrementxs=((endx-startx)/2)/(startdivider);
    incrementys=((endy-starty)/2)/(startdivider);
    incrementxe=(startendx-startx)/(enddivider);
    incrementye=((endy-starty)/2)/(enddivider);
    
    midpoint=[startendx,startendy];
    curve=(startdivider);
    pointsstart = [
[startx,starty],[startx+1*incrementxs,starty+1*incrementys],[startx+2*incrementxs,starty+2*incrementys],[startx+3*incrementxs,starty+3*incrementys],[startx+4*incrementxs,starty+4*incrementys],[startx+5*incrementxs,starty+5*incrementys],[startx+6*incrementxs,starty+6*incrementys],[startx+7*incrementxs,starty+7*incrementys],[startendx,startendy]];
    pointsend = [
    [startendx,startendy],[startendx+1*incrementxe,startendy+1*incrementye], [startendx+2*incrementxe,startendy+2*incrementye], [startendx+3*incrementxe,startendy+3*incrementye],[startendx+4*incrementxe,startendy+4*incrementye],[startendx+5*incrementxe,startendy+5*incrementye],[startendx+6*incrementxe,startendy+6*incrementye],[endx,endy]];
    
    pointscurvestart = [
[startx,starty],[startx+1*incrementxs,starty+1*incrementys-startdivider*sin(1*90/(startdivider/2))],[startx+2*incrementxs,starty+2*incrementys-startdivider*sin(2*90/(startdivider/2))],[startx+3*incrementxs,starty+3*incrementys-startdivider*sin(3*90/(startdivider/2))],[startx+4*incrementxs,starty+4*incrementys-startdivider*sin(4*90/(startdivider/2))],[startx+5*incrementxs,starty+5*incrementys-startdivider*sin(5*90/(startdivider/2))],[startx+6*incrementxs,starty+6*incrementys-startdivider*sin(6*90/(startdivider/2))],[startx+7*incrementxs,starty+7*incrementys-startdivider*sin(7*90/(startdivider/2))],[startendx,startendy]];
    
    pointscurveend = [
    [startendx,startendy],[startendx+1*incrementxe,startendy+1*incrementye+enddivider*sin(1*90/(enddivider/2))], [startendx+2*incrementxe,startendy+2*incrementye+enddivider*sin(2*90/(enddivider/2))], [startendx+3*incrementxe,startendy+3*incrementye+enddivider*sin(3*90/(enddivider/2))],[startendx+4*incrementxe,startendy+4*incrementye+enddivider*sin(4*90/(enddivider/2))],[startendx+5*incrementxe,startendy+5*incrementye+enddivider*sin(5*90/(enddivider/2))],[startendx+6*incrementxe,startendy+6*incrementye+enddivider*sin(6*90/(enddivider/2))],[endx,endy]];
//    color("chocolate")translate([pointsstart[0][0],pointsstart[0][1],0])circle(0.3);
//    for (i=[1:1:startdivider]){
//        color("red")translate([pointsstart[i][0],pointsstart[i][1]-startdivider*sin(i*90/(startdivider/2)),0])circle(0.3);
//   }
    for (k=[1:1:startdivider]){
            if (starttype==0){
                if (pointsstart[k][1]>=pointsstart[k-1][1]){
            translate([pointsstart[k][0]+(pointsstart[k-1][0]-pointsstart[k][0])/2,pointsstart[k][1]+(pointsstart[k-1][1]-pointsstart[k][1])/2,1])rotate([0,0,90+asin((pointsstart[k-1][0]-pointsstart[k][0])/sqrt((pointsstart[k-1][0]-pointsstart[k][0])*(pointsstart[k-1][0]-pointsstart[k][0])+(pointsstart[k-1][1]-pointsstart[k][1])*(pointsstart[k-1][1]-pointsstart[k][1])))])square([sqrt((pointsstart[k-1][0]-pointsstart[k][0])*(pointsstart[k-1][0]-pointsstart[k][0])+(pointsstart[k-1][1]-pointsstart[k][1])*(pointsstart[k-1][1]-pointsstart[k][1])),trace],center=true);
            } 
            else{
                translate([pointsstart[k][0]+(pointsstart[k-1][0]-pointsstart[k][0])/2,pointsstart[k][1]+(pointsstart[k-1][1]-pointsstart[k][1])/2,1])rotate([0,0,90-asin((pointsstart[k-1][0]-pointsstart[k][0])/sqrt((pointsstart[k-1][0]-pointsstart[k][0])*(pointsstart[k-1][0]-pointsstart[k][0])+(pointsstart[k-1][1]-pointsstart[k][1])*(pointsstart[k-1][1]-pointsstart[k][1])))])square([sqrt((pointsstart[k-1][0]-pointsstart[k][0])*(pointsstart[k-1][0]-pointsstart[k][0])+(pointsstart[k-1][1]-pointsstart[k][1])*(pointsstart[k-1][1]-pointsstart[k][1])),trace],center=true);
                }
        }           
            }
    for (l=[1:1:enddivider-1]){
            if (endtype==0){
                if (pointsend[l][1]>=pointsend[l-1][1]){
           translate([pointsend[l][0]+(pointsend[l-1][0]-pointsend[l][0])/2,pointsend[l][1]+(pointsend[l-1][1]-pointsend[l][1])/2,1])rotate([0,0,90+asin((pointsend[l-1][0]-pointsend[l][0])/sqrt((pointsend[l-1][0]-pointsend[l][0])*(pointsend[l-1][0]-pointsend[l][0])+(pointsend[l-1][1]-pointsend[l][1])*(pointsend[l-1][1]-pointsend[l][1])))])square([sqrt((pointsend[l-1][0]-pointsend[l][0])*(pointsend[l-1][0]-pointsend[l][0])+(pointsend[l-1][1]-pointsend[l][1])*(pointsend[l-1][1]-pointsend[l][1])),trace],center=true);
            }   
            else
                {
            translate([pointsend[l][0]+(pointsend[l-1][0]-pointsend[l][0])/2,pointsend[l][1]+(pointsend[l-1][1]-pointsend[l][1])/2,1])rotate([0,0,90-asin((pointsend[l-1][0]-pointsend[l][0])/sqrt((pointsend[l-1][0]-pointsend[l][0])*(pointsend[l-1][0]-pointsend[l][0])+(pointsend[l-1][1]-pointsend[l][1])*(pointsend[l-1][1]-pointsend[l][1])))])square([sqrt((pointsend[l-1][0]-pointsend[l][0])*(pointsend[l-1][0]-pointsend[l][0])+(pointsend[l-1][1]-pointsend[l][1])*(pointsend[l-1][1]-pointsend[l][1])),trace],center=true);
            }
         if(l==enddivider-1) {
             if (pointscurveend[l][1]>=endy){
          translate([endx+(pointsend[l-1][0]-endx)/2,endy+(pointsend[l-1][1]-endy)/2,1])rotate([0,0,90-asin((pointsend[l-1][0]-endx)/sqrt((pointsend[l-1][0]-endx)*(pointsend[l-1][0]-endx)+(pointsend[l-1][1]-endy)*(pointsend[l-1][1]-endy)))])square([sqrt((pointsend[l-1][0]-endx)*(pointsend[l-1][0]-endx)+(pointsend[l-1][1]-endy)*(pointsend[l-1][1]-endy)),trace],center=true);
         }
      else
       {
          translate([endx+(pointsend[l-1][0]-endx)/2,endy+(pointsend[l-1][1]-endy)/2,1])rotate([0,0,90+asin((pointsend[l-1][0]-endx)/sqrt((pointsend[l-1][0]-endx)*(pointsend[l-1][0]-endx)+(pointsend[l-1][1]-endy)*(pointsend[l-1][1]-endy)))])square([sqrt((pointsend[l-1][0]-endx)*(pointsend[l-1][0]-endx)+(pointsend[l-1][1]-endy)*(pointsend[l-1][1]-endy)),trace],center=true);
         }     
        }  }       
            }       
           for (m=[1:1:startdivider]){
            if (starttype==1){
                if (pointscurvestart[m][1]>=pointscurvestart[m-1][1]){
            translate([pointscurvestart[m][0]+(pointscurvestart[m-1][0]-pointscurvestart[m][0])/2,pointscurvestart[m][1]+(pointscurvestart[m-1][1]-pointscurvestart[m][1])/2,1])rotate([0,0,90+asin((pointscurvestart[m-1][0]-pointscurvestart[m][0])/sqrt((pointscurvestart[m-1][0]-pointscurvestart[m][0])*(pointscurvestart[m-1][0]-pointscurvestart[m][0])+(pointscurvestart[m-1][1]-pointscurvestart[m][1])*(pointscurvestart[m-1][1]-pointscurvestart[m][1])))])square([sqrt((pointscurvestart[m-1][0]-pointscurvestart[m][0])*(pointscurvestart[m-1][0]-pointscurvestart[m][0])+(pointscurvestart[m-1][1]-pointscurvestart[m][1])*(pointscurvestart[m-1][1]-pointscurvestart[m][1]))+clearance,trace+room*clearance],center=true);
//translate([pointscurvestart[m][1],pointscurvestart[m][1],1])circle(trace/2+clearance*room);
                    }
            else{
                translate([pointscurvestart[m][0]+(pointscurvestart[m-1][0]-pointscurvestart[m][0])/2,pointscurvestart[m][1]+(pointscurvestart[m-1][1]-pointscurvestart[m][1])/2,1])rotate([0,0,90-asin((pointscurvestart[m-1][0]-pointscurvestart[m][0])/sqrt((pointscurvestart[m-1][0]-pointscurvestart[m][0])*(pointscurvestart[m-1][0]-pointscurvestart[m][0])+(pointscurvestart[m-1][1]-pointscurvestart[m][1])*(pointscurvestart[m-1][1]-pointscurvestart[m][1])))])square([sqrt((pointscurvestart[m-1][0]-pointscurvestart[m][0])*(pointscurvestart[m-1][0]-pointscurvestart[m][0])+(pointscurvestart[m-1][1]-pointscurvestart[m][1])*(pointscurvestart[m-1][1]-pointscurvestart[m][1]))+clearance,trace+room*clearance],center=true);
//translate([pointscurvestart[m][1],pointscurvestart[m][1],1])circle(trace/2+clearance*room);
                }
            
         }   
            }
    for (n=[1:1:enddivider-1]){
            if (endtype==1){
                if (pointscurveend[n][1]>=pointscurveend[n-1][1]){
            translate([pointscurveend[n][0]+(pointscurveend[n-1][0]-pointscurveend[n][0])/2,pointscurveend[n][1]+(pointscurveend[n-1][1]-pointscurveend[n][1])/2,1])rotate([0,0,90+asin((pointscurveend[n-1][0]-pointscurveend[n][0])/sqrt((pointscurveend[n-1][0]-pointscurveend[n][0])*(pointscurveend[n-1][0]-pointscurveend[n][0])+(pointscurveend[n-1][1]-pointscurveend[n][1])*(pointscurveend[n-1][1]-pointscurveend[n][1])))])square([sqrt((pointscurveend[n-1][0]-pointscurveend[n][0])*(pointscurveend[n-1][0]-pointscurveend[n][0])+(pointscurveend[n-1][1]-pointscurveend[n][1])*(pointscurveend[n-1][1]-pointscurveend[n][1]))+clearance,trace+room*clearance],center=true);}
            else{
            translate([pointscurveend[n][0]+(pointscurveend[n-1][0]-pointscurveend[n][0])/2,pointscurveend[n][1]+(pointscurveend[n-1][1]-pointscurveend[n][1])/2,1])rotate([0,0,90-asin((pointscurveend[n-1][0]-pointscurveend[n][0])/sqrt((pointscurveend[n-1][0]-pointscurveend[n][0])*(pointscurveend[n-1][0]-pointscurveend[n][0])+(pointscurveend[n-1][1]-pointscurveend[n][1])*(pointscurveend[n-1][1]-pointscurveend[n][1])))])square([sqrt((pointscurveend[n-1][0]-pointscurveend[n][0])*(pointscurveend[n-1][0]-pointscurveend[n][0])+(pointscurveend[n-1][1]-pointscurveend[n][1])*(pointscurveend[n-1][1]-pointscurveend[n][1]))+clearance,trace+room*clearance],center=true);}
             if(n==enddivider-1) { 
                 if (pointscurveend[n][1]>=endy){
            translate([endx+(pointscurveend[n][0]-endx)/2,endy+(pointscurveend[n][1]-endy)/2,1])rotate([0,0,90-asin((pointscurveend[n][0]-endx)/sqrt((pointscurveend[n][0]-endx)*(pointscurveend[n][0]-endx)+(pointscurveend[n][1]-endy)*(pointscurveend[n][1]-endy)))])square([sqrt((pointscurveend[n][0]-endx)*(pointscurveend[n][0]-endx)+(pointscurveend[n][1]-endy)*(pointscurveend[n][1]-endy))+clearance,trace+room*clearance],center=true);
             }
             else
             {
            translate([endx+(pointscurveend[n][0]-endx)/2,endy+(pointscurveend[n][1]-endy)/2,1])rotate([0,0,90+asin((pointscurveend[n][0]-endx)/sqrt((pointscurveend[n][0]-endx)*(pointscurveend[n][0]-endx)+(pointscurveend[n][1]-endy)*(pointscurveend[n][1]-endy)))])square([sqrt((pointscurveend[n][0]-endx)*(pointscurveend[n][0]-endx)+(pointscurveend[n][1]-endy)*(pointscurveend[n][1]-endy))+clearance,trace+room*clearance],center=true);
             }    
             }
            }
            }       
//    for (j=[0:1:enddivider]){     
//color("green")translate([pointsend[j][0],pointsend[j][1]+enddivider*sin(j*90/(enddivider/2)),0])circle(0.3);
//        echo(pointsend[j][0]);
//}color("chocolate")translate([pointsend[len(pointsend)-1][0],pointsend[len(pointsend)-1][1],0])circle(0.3); 
//(startx,starty,starttype,startdivider,startpad,endx,endy,endtype,enddivider,endpad,room)
difference(){
     union(){
         translate([0,0,0]) linear_extrude(2){
if (startpad==1)translate([startx,starty,0])rotate([0,0,360/(4*detail)])circle(pad+clearance*room, $fn=detail);
if (startpad==2)translate([startx,starty,0])rotate([0,0,360/(4*detail)])circle(pad*0.75+clearance*room, $fn=detail);
if (endpad==1)translate([endx,endy,0])rotate([0,0,360/(4*detail)])circle(pad+clearance*room, $fn=detail);
if (endpad==2)translate([endx,endy,0])rotate([0,0,360/(4*detail)])circle(pad*0.75+clearance*room, $fn=detail);
       }
if (startpad==0)translate([startx,starty,1])circle(trace/2+clearance*room);
if (endpad==0)translate([endx,endy,1])circle(trace/2+clearance*room);
    }
    if (startpad==1)  translate([startx,starty,0])rotate([0,0,360/(4*detail)])cylinder(15,holeradius,holeradius,center=true);
if (endpad==1) translate([endx,endy,0])rotate([0,0,360/(4*detail)])cylinder(15,holeradius,holeradius,center=true);
    if (startpad==2)  translate([startx,starty,0])rotate([0,0,360/(4*detail)])cylinder(15,holeradius,holeradius,center=true);
if (endpad==2) translate([endx,endy,0])rotate([0,0,360/(4*detail)])cylinder(15,holeradius,holeradius,center=true);
   }        
    }
    module hyp(adjacent,opposite){
     echo(sqrt(abs(adjacent)*abs(adjacent)+abs(oppocite)*abs(oppocite))); 
    }
module label(posx,posy,rotation,mirr,labeltext,size,labelfont) {
      translate([0,0,-1])linear_extrude(6){
translate([posx,posy])rotate([0,0,rotation])mirror([mirr,0,0])text(labeltext,size,font=labelfont);
}
}
module chrystal(x,y,rotation,room){
     translate([x,y,0])rotate([0,0,rotation])linear_extrude(2){
        for(i=[1:1:4])
            difference(){
   translate([chryst[i][0],chryst[i][1],0])square([1.3+room,1.1+room],center=true);
   if (room==0){translate([chryst[i][0]-0.3,chryst[i][1]-0.3,0])text(str(i),0.5);}}
        }
}
module usbb(x,y,rotation,name,value,room){
    translate([x,y,0.5])rotate([0,0,rotation])linear_extrude(1){
   translate([homebrusb[1][0],homebrusb[1][1],0])difference(){circle(pad+room); circle(holeradius);}
   translate([homebrusb[2][0],homebrusb[2][1],0])difference(){circle(pad+room); circle(holeradius);}
   translate([homebrusb[3][0],homebrusb[3][1],0])difference(){circle(pad+room); circle(holeradius);}
   translate([homebrusb[4][0],homebrusb[4][1],0])difference(){circle(pad+room); circle(holeradius);}
   if (room!=0){translate([-3.5,0.92,0])text(name,0.3);
   translate([-0.5,0.92,0])text(value,0.3);}
}}
module spiflash(x,y,rotation,name,value,room){
    translate([x,y,0])rotate([0,0,rotation])linear_extrude(2){
   translate([0,0,0])square([0.4,1.9],center=true);
   translate([spiflash16mb[1][0],spiflash16mb[1][1],0])square([1+room,0.25+room],center=true);
       translate([spiflash16mb[2][0],spiflash16mb[2][1],0])square([1+room,0.25+room],center=true);
       translate([spiflash16mb[3][0],spiflash16mb[3][1],0])square([1+room,0.25+room],center=true);
       translate([spiflash16mb[4][0],spiflash16mb[4][1],0])square([1+room,0.25+room],center=true);
       translate([spiflash16mb[5][0],spiflash16mb[5][1],0])square([1+room,0.25+room],center=true);
       translate([spiflash16mb[6][0],spiflash16mb[6][1],0])square([1+room,0.25+room],center=true);
       translate([spiflash16mb[7][0],spiflash16mb[7][1],0])square([1+room,0.25+room],center=true);
       translate([spiflash16mb[8][0],spiflash16mb[8][1],0])square([1+room,0.25+room],center=true);
   if (room!=0){translate([-0.4,-0.9,0])rotate([0,0,90])text(name,0.28);
   translate([0.7,-0.4,0])rotate([0,0,90])text(value,0.3);}
}}
module o6o3(x,y,rotation,room,value){
    translate([x,y,0])rotate([0,0,rotation])linear_extrude(2){
   translate([osixothree[1][0],osixothree[1][1],0])square(0.8+room,center=true);
   translate([osixothree[2][0],osixothree[2][1],0])square(0.8+room,center=true);
  
   if(room!=0){translate([-0.2,0.4,0])rotate([0,0,-90])text(value,0.3);}
}}
module DPAK3V3(x,y,rotation,room){
    translate([x,y,0])rotate([0,0,rotation])linear_extrude(2){
        translate([DPAK[1][0],DPAK[1][1],0])square(6.7+room*2,center=true);
        translate([DPAK[2][0],DPAK[2][1],0])square([3+room*2,1.6+room*2],center=true);
        translate([DPAK[3][0],DPAK[3][1],0])square([3+room*2,1.6+room*2],center=true);
}}

module sot(x,y,rotation,room){
   translate([x,y,0])rotate([0,0,rotation])linear_extrude(2){
        translate([sot523[1][0],sot523[1][1],0])square([0.4+room,0.51+room],center=true);
        translate([sot523[2][0],sot523[2][1],0])square([0.4+room,0.51+room],center=true);
        translate([sot523[3][0],sot523[3][1],0])square([0.4+room,0.51+room],center=true);  
}}
module rp20footprint(x,y,rotation,room){
    translate([x,y,0])rotate([0,0,rotation])linear_extrude(2){
        square(3.2+room,center=true);
        for(a=[0:90:359]){
        for (b=[2.6:-0.4:-2.6]){
            rotate([0,0,a])translate([7.26/2,b,0])square([1+room,0.2+room],center=true);
            if(room!=0){rotate([0,0,a+180])translate([7.26/2-0.7,b,0])rotate([0,0,-a+180])translate([-0.1,-0.1,0])text(str((a/90)*14+((b+2.6)/0.4)+1),0.15);}
        }
    }
    translate([-7.26/2,7.26/2,0])circle(0.3+room);
    }
}

module border(){
 translate([0,0,1])difference(){
cube([width+3*frame,heigth+3*frame,0.2],center=true);
cube([width-frame,heigth-frame,4],center=true);
}  
}

module copperclad (){
translate([0,0,1])color("black")linear_extrude(0.1)polygon([[21/2,51/2],[21/2,-51/2],[-21/2,-51/2],[-21/2,51/2]]);  
}
