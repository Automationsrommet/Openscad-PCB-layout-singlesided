//Here is my postapocalyptical pico, made mostly with parts I have on hand.
//Todo: 
//Chekt if th DPAK even fits. 
//Write 4 trace-functions into one smooth curve.    Check
//Angle everything.                                 Check
//ground points #3.                                 Check
//add vertical curve at 2                           Check
//Reduce track input to component and pin somehow   I give up, unless concat trick would work
//Solve parametric trace midpoint                   Check! I solved it!
//Learn circuit layout in KiCad                     Why bother?

//Input parameters

pad=1.0;
trace=0.20;
holeradius=0.2;
clearance=0.2;
detail=5;
frame=0.6;
heigth=51;
width=21;
segments=3;
//Position Lists: center x, y and rotation, then pin coordinates relative to center of component

chrystalPL=[
[-1,-10,0],[-1.15,-0.95],[1.15,-0.95],[1.15,0.95],[-1.15,0.95]];
DPAKPL=[
[1, -21, 0],[-6.7/2,0],[1.8+1.5,2.30],[1.8+1.5,-2.30]
];
USBPL=[
[0, 51/2-1.6, 0],[-2.54*1.5,0],
[-2.54*0.5,0],[2.54*0.5,0],[2.54*1.5,0]
];
o6o3PL=[
[0, 0, 0],[0.7/2+0.8/2,0],[-0.7/2-0.8/2,0]
];
picoPL=[
[0, 0, 0],[-17.78/2,48.26/2],[-17.78/2,48.26/2-2.54*1],[-17.78/2,48.26/2-2.54*2],[-17.78/2,48.26/2-2.54*3],[-17.78/2,48.26/2-2.54*4],[-17.78/2,48.26/2-2.54*5],[-17.78/2,48.26/2-2.54*6],[-17.78/2,48.26/2-2.54*7],[-17.78/2,48.26/2-2.54*8],[-17.78/2,48.26/2-2.54*9],[-17.78/2,48.26/2-2.54*10],[-17.78/2,48.26/2-2.54*11],[-17.78/2,48.26/2-2.54*12],[-17.78/2,48.26/2-2.54*13],[-17.78/2,48.26/2-2.54*14],[-17.78/2,48.26/2-2.54*15],[-17.78/2,48.26/2-2.54*16],[-17.78/2,48.26/2-2.54*17],[-17.78/2,48.26/2-2.54*18],[-17.78/2,48.26/2-2.54*19],[17.78/2,48.26/2-2.54*19],[17.78/2,48.26/2-2.54*18],[17.78/2,48.26/2-2.54*17],[17.78/2,48.26/2-2.54*16],[17.78/2,48.26/2-2.54*15],[17.78/2,48.26/2-2.54*14],[17.78/2,48.26/2-2.54*13],[17.78/2,48.26/2-2.54*12],[17.78/2,48.26/2-2.54*11],[17.78/2,48.26/2-2.54*10],[17.78/2,48.26/2-2.54*9],[17.78/2,48.26/2-2.54*8],[17.78/2,48.26/2-2.54*7],[17.78/2,48.26/2-2.54*6],[17.78/2,48.26/2-2.54*5],[17.78/2,48.26/2-2.54*4],[17.78/2,48.26/2-2.54*3],[17.78/2,48.26/2-2.54*2],[17.78/2,48.26/2-2.54*1],[17.78/2,48.26/2],[-2.54,-51/2+1.6],[0,-51/2+1.6],[2.54,-51/2+1.6]
];
rp2040PL=[
[1.2,4,-7],
[-8.25/2,+2.6],[-8.25/2,+2.2],[-8.25/2,1.8],[-8.25/2,1.4],[-8.25/2,1.0],[-8.25/2,0.6],[-8.25/2,0.2],[-8.25/2,-0.2],[-8.25/2,-0.6],[-8.25/2,-1],[-8.25/2,-1.4],[-8.25/2,-1.8],[-8.25/2,-2.2],[-8.25/2,-2.6],
[-2.6,-8.25/2],[-2.2,-8.25/2],[-1.8,-8.25/2],[-1.4,-8.25/2],[-1,-8.25/2],[-0.6,-8.25/2],[-0.2,-8.25/2],[0.2,-8.25/2],[0.6,-8.25/2],[1,-8.25/2],[1.4,-8.25/2],[1.8,-8.25/2],[2.2,-8.25/2],[2.6,-8.25/2],
[8.25/2,-2.6],[8.25/2,-2.2],[8.25/2,-1.8],[8.25/2,-1.4],[8.25/2,-1],[8.25/2,-0.6],[8.25/2,-0.2],[8.25/2,0.2],[8.25/2,0.6],[8.25/2,1],[8.25/2,1.4],[8.25/2,1.8],[8.25/2,2.2],[8.25/2,2.6],
[2.6,8.25/2],[2.2,8.25/2],[1.8,8.25/2],[1.4,8.25/2],[1.0,8.25/2],[0.6,8.25/2],[0.2,8.25/2],[-0.2,8.25/2],[-0.6,8.25/2],[-1,8.25/2],[-1.4,8.25/2],[-1.8,8.25/2],[-2.2,8.25/2],[-2.6,8.25/2]];
spiflashPL=[
[rp2040PL[0][0]-1.6,rp2040PL[0][1]+7,rp2040PL[0][2]+90],[-3/2,0.75],[-3/2,0.25],[-3/2,-0.25],[-3/2,-0.75],[3/2,-0.75],[3/2,-0.25],[3/2,0.25],[3/2,0.75]];
sot523PL=[
[5,8,48],[-0.5,-1.29/2],[0,1.29/2],[0.5,-1.29/2]];

//  MAIN  code starts here where various modules are called

difference(){
copperclad(); 
   
color("white")union(){


track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[1][0],picoPL[1][1],2,segments,2,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[2][0],rp2040PL[2][1],2,segments,0,1.2);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[2][0],picoPL[2][1],2,segments,2,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[3][0],rp2040PL[3][1],2,segments,0,1.15);
    
    track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[3][0],picoPL[3][1],2,segments,2,picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[3][0]+0.1,picoPL[3][1]+0.1,2,segments,2,1);

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[4][0],picoPL[4][1],2,segments,2,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[4][0],rp2040PL[4][1],2,segments,0,1.1);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[5][0],picoPL[5][1],2,segments,2,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[5][0],rp2040PL[5][1],2,segments,0,1);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[6][0],picoPL[6][1],2,segments,2,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[6][0],rp2040PL[6][1],2,segments,0,1);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[7][0],picoPL[7][1],2,segments,2,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[7][0],rp2040PL[7][1],2,segments,0,1);
    
    track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[8][0],picoPL[8][1],2,segments,2,picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[8][0]+0.1,picoPL[8][1]+0.1,2,segments,2,1);

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[9][0],picoPL[9][1],2,segments,2,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[8][0],rp2040PL[8][1],2,segments,0,1);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[10][0],picoPL[10][1],2,segments,2,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[9][0],rp2040PL[9][1],2,segments,0,1);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[11][0],picoPL[11][1],2,segments,2,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[11][0],rp2040PL[11][1],2,segments,0,1);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[12][0],picoPL[12][1],2,segments,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[12][0],rp2040PL[12][1],2,segments,0,1);

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[13][0],picoPL[13][1],2,segments,2,picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[13][0]+0.1,picoPL[13][1]+0.1,2,segments,2,1);

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[14][0],picoPL[14][1],2,segments,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[13][0],rp2040PL[13][1],2,segments,0,1.13);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[15][0],picoPL[15][1],2,segments,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[14][0],rp2040PL[14][1],2,segments,0,1.2);  
 
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[16][0],picoPL[16][1],2,segments,2,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[15][0],rp2040PL[15][1],2,segments,0,1);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[17][0],picoPL[17][1],2,segments,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[16][0],rp2040PL[16][1],2,segments,0,1);

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[18][0],picoPL[18][1],2,segments,2,picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[18][0]+0.1,picoPL[18][1]+0.1,2,segments,2,1);

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[19][0],picoPL[19][1],2,segments,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[17][0],rp2040PL[17][1],2,segments,0,1);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[20][0],picoPL[20][1],2,segments,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[18][0],rp2040PL[18][1],2,segments,0,1);  


//xtal 20 to 1 and 21 to 3
track(rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[20][0],rp2040PL[20][1],0,segments,0,chrystalPL[0][0],chrystalPL[0][1],chrystalPL[0][2],chrystalPL[1][0]+0.75,chrystalPL[1][1],0,segments,0,1);
track(rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[21][0],rp2040PL[21][1],0,segments,0,chrystalPL[0][0],chrystalPL[0][1],chrystalPL[0][2],chrystalPL[3][0]-0.55,chrystalPL[3][1],0,segments,0,1);

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[21][0],picoPL[21][1],1,2,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[27][0],rp2040PL[28][1],2,9,0,0.51);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[22][0],picoPL[22][1],1,2,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[28][0],rp2040PL[28][1],2,9,0,0.51); 

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[23][0],picoPL[23][1],2,segments,2,picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[23][0]+0.1,picoPL[23][1]+0.1,2,segments,2,1);

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[24][0],picoPL[24][1],1,12,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[29][0],rp2040PL[29][1],1,5,0,1.3); 
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[25][0],picoPL[25][1],1,12,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[30][0],rp2040PL[30][1],1,6,0,1.2); 
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[26][0],picoPL[26][1],1,12,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[31][0],rp2040PL[31][1],1,6,0,0.9); 
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[27][0],picoPL[27][1],1,13,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[32][0],rp2040PL[32][1],1,6,0,1); 

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[28][0],picoPL[28][1],2,segments,2,picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[28][0]+0.1,picoPL[28][1]+0.1,2,segments,2,1);

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[29][0],picoPL[29][1],1,segments,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[34][0],rp2040PL[34][1],1,segments,0,1);

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[31][0],picoPL[31][1],0,segments,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[38][0],rp2040PL[38][1],0,segments,0,1);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[32][0],picoPL[32][1],0,segments,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[39][0],rp2040PL[39][1],0,segments,0,1);

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[33][0],picoPL[33][1],2,segments,2,picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[33][0]+0.1,picoPL[33][1]+0.1,2,segments,2,1);

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[34][0],picoPL[34][1],0,segments,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[40][0],rp2040PL[40][1],0,segments,0,1);


track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[38][0],picoPL[38][1],2,segments,2,picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[38][0]+0.1,picoPL[38][1]+0.1,2,segments,2,1);

track(rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[56][0],rp2040PL[56][1],0,segments,0,spiflashPL[0][0],spiflashPL[0][1],spiflashPL[0][2],spiflashPL[1][0]-0.5,spiflashPL[1][1],0,segments,0,1);
track(rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[55][0],rp2040PL[55][1],0,segments,0,spiflashPL[0][0],spiflashPL[0][1],spiflashPL[0][2],spiflashPL[2][0]-0.5,spiflashPL[2][1],0,segments,0,1);
track(rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[54][0],rp2040PL[54][1],0,segments,0,spiflashPL[0][0],spiflashPL[0][1],spiflashPL[0][2],spiflashPL[3][0]-0.5,spiflashPL[3][1],0,segments,0,1);

rp2040FP(rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],1);    
USBFP(USBPL[0][0],USBPL[0][1],USBPL[0][2],"Homemade","USB-B",1);
DPAKFP(DPAKPL[0][0],DPAKPL[0][1],DPAKPL[0][2],1);
o6o3FP(5.3,12,0,1," ");
o6o3FP(5.3,13,0,1," ");
o6o3FP(-2-0.1,21.1,90,1,"100n");
o6o3FP(-0.5-0.1,21.1,90,1,"10u");
spiflashFP(spiflashPL[0][0],spiflashPL[0][1],spiflashPL[0][2],"SPIFLASH","16Mb",1);
chrystalFP(chrystalPL[0][0],chrystalPL[0][1],chrystalPL[0][2],1);
o6o3FP(chrystalPL[0][0]+chrystalPL[3][0]-1.9,chrystalPL[0][1]+chrystalPL[3][1]+2,90,1,"R1k");
o6o3FP(chrystalPL[0][0]+chrystalPL[1][0]-0.5,chrystalPL[0][1]+chrystalPL[1][1]-2,90,1,"15p");
o6o3FP(chrystalPL[0][0]+chrystalPL[1][0]+0.5,chrystalPL[0][1]+chrystalPL[1][1]-2,90,1,"15p");
o6o3FP(rp2040PL[0][0]+rp2040PL[3][0]+2.9,rp2040PL[0][1]+rp2040PL[3][1]+1.75,46,1,"470");
o6o3FP(rp2040PL[0][0]+rp2040PL[3][0]+3.8,rp2040PL[0][1]+rp2040PL[3][1]+0.4,-44,1,"LED");
o6o3FP(rp2040PL[0][0]+rp2040PL[3][0]+2.7,rp2040PL[0][1]+rp2040PL[3][1]-0.5,101,1,"23 24");
sot523FP(sot523PL[0][0],sot523PL[0][1],sot523PL[0][2],1);
o6o3FP(sot523PL[0][0]+sot523PL[3][0]+0.8,sot523PL[0][1]+sot523PL[3][1]+3.4,90,1,"100k");
o6o3FP(sot523PL[0][0]+sot523PL[3][0]-0.1,sot523PL[0][1]+sot523PL[3][1]+3.4,90,1,"1nF");
o6o3FP(sot523PL[0][0]+sot523PL[3][0]-1,sot523PL[0][1]+sot523PL[3][1]+2.6,90,1,"200k");
o6o3FP(picoPL[0][0]+picoPL[35][0]-1.4,picoPL[0][1]+picoPL[35][1]+1.1,90,1,"200");
o6o3FP(picoPL[0][0]+picoPL[35][0]-1.5,picoPL[0][1]+picoPL[35][1]-1.1,90,1,"2u2");
o6o3FP(picoPL[0][0]+picoPL[35][0]-2.5,picoPL[0][1]+picoPL[35][1]-1.1,90,1,"1ohm");
o6o3FP(sot523PL[0][0]+sot523PL[3][0]-1,sot523PL[0][1]+sot523PL[3][1]+2.6,90,1,"200k");
o6o3FP(2.8,11.7,90,1,"100n");
o6o3FP(2.8,15.9,100,1,"100n");   
label(2.2,17.5,90,0,"Postapocalyptic", 0.35,"Courier");
label(3.4,18,93,0,"Pico", 1,"Courier");
label(4.5,18,98,0,"open hardware", 0.4,"Courier");
label(3.8,17.9,95,0,"version 1 Melbu april22", 0.23,"Courier");
}}

color("black")union(){
//the monster function "track" and its parameters:
// startcompx,startcompy,startrotation,startx,starty,starttype,startdivider,startpad,
//endcompx,endcompy,endrotation,endx,endy,endtype,enddivider,endpad,room(and trace midpoint)


track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[1][0],picoPL[1][1],2,segments,2,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[2][0],rp2040PL[2][1],2,segments,0,-0.2);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[2][0],picoPL[2][1],2,segments,2,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[3][0],rp2040PL[3][1],2,segments,0,-0.15);
    
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[3][0],picoPL[3][1],2,segments,3,picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[3][0]+0.1,picoPL[3][1]+0.1,2,segments,3,0);

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[4][0],picoPL[4][1],2,segments,2,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[4][0],rp2040PL[4][1],2,segments,0,-0.1);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[5][0],picoPL[5][1],2,segments,2,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[5][0],rp2040PL[5][1],2,segments,0,0);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[6][0],picoPL[6][1],2,segments,2,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[6][0],rp2040PL[6][1],2,segments,0,0);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[7][0],picoPL[7][1],2,segments,2,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[7][0],rp2040PL[7][1],2,segments,0,0);
    
    track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[8][0],picoPL[8][1],2,segments,3,picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[8][0]+0.1,picoPL[8][1]+0.1,2,segments,3,0);

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[9][0],picoPL[9][1],2,segments,2,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[8][0],rp2040PL[8][1],2,segments,0,0);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[10][0],picoPL[10][1],2,segments,2,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[9][0],rp2040PL[9][1],2,segments,0,0);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[11][0],picoPL[11][1],2,segments,2,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[11][0],rp2040PL[11][1],2,segments,0,0);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[12][0],picoPL[12][1],2,segments,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[12][0],rp2040PL[12][1],2,segments,0,0);

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[13][0],picoPL[13][1],2,segments,3,picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[13][0]+0.1,picoPL[13][1]+0.1,2,segments,3,0);

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[14][0],picoPL[14][1],2,segments,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[13][0],rp2040PL[13][1],2,segments,0,-0.13);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[15][0],picoPL[15][1],2,segments,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[14][0],rp2040PL[14][1],2,segments,0,-0.2);  
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[16][0],picoPL[16][1],2,segments,2,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[15][0],rp2040PL[15][1],2,segments,0,0);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[17][0],picoPL[17][1],2,segments,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[16][0],rp2040PL[16][1],2,segments,0,0);

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[18][0],picoPL[18][1],2,segments,3,picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[18][0]+0.1,picoPL[18][1]+0.1,2,segments,3,0);

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[19][0],picoPL[19][1],2,segments,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[17][0],rp2040PL[17][1],2,segments,0,0);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[20][0],picoPL[20][1],2,segments,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[18][0],rp2040PL[18][1],2,segments,0,0);  

track(rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[20][0],rp2040PL[20][1],0,segments,0,chrystalPL[0][0],chrystalPL[0][1],chrystalPL[0][2],chrystalPL[1][0]+0.75,chrystalPL[1][1],0,segments,0,0);
track(rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[21][0],rp2040PL[21][1],0,segments,0,chrystalPL[0][0],chrystalPL[0][1],chrystalPL[0][2],chrystalPL[3][0]-0.55,chrystalPL[3][1],0,segments,0,0);
 
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[21][0],picoPL[21][1],2,2,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[27][0],rp2040PL[28][1],2,9,0,0.49);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[22][0],picoPL[22][1],2,2,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[28][0],rp2040PL[28][1],2,9,0,0.49);  
 
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[23][0],picoPL[23][1],2,segments,3,picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[23][0]+0.1,picoPL[23][1]+0.1,2,segments,3,0); 
 
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[24][0],picoPL[24][1],1,12,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[29][0],rp2040PL[29][1],1,5,0,-0.3); 
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[25][0],picoPL[25][1],1,12,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[30][0],rp2040PL[30][1],1,6,0,-0.2); 
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[26][0],picoPL[26][1],1,12,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[31][0],rp2040PL[31][1],1,6,0,-0.10); 
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[27][0],picoPL[27][1],1,13,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[32][0],rp2040PL[32][1],1,6,0,0); 

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[28][0],picoPL[28][1],2,segments,3,picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[28][0]+0.1,picoPL[28][1]+0.1,2,segments,3,0);

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[29][0],picoPL[29][1],1,segments,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[34][0],rp2040PL[34][1],1,segments,0,0);

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[31][0],picoPL[31][1],0,segments,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[38][0],rp2040PL[38][1],0,segments,0,0);
track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[32][0],picoPL[32][1],0,segments,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[39][0],rp2040PL[39][1],0,segments,0,0);

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[33][0],picoPL[33][1],2,segments,3,picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[33][0]+0.1,picoPL[33][1]+0.1,2,segments,3,0);

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[34][0],picoPL[34][1],0,segments,1,rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[40][0],rp2040PL[40][1],0,segments,0,0);

track(picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[38][0],picoPL[38][1],2,segments,3,picoPL[0][0],picoPL[0][1],picoPL[0][2],picoPL[38][0]+0.1,picoPL[38][1]+0.1,2,segments,3,0);

track(rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[56][0],rp2040PL[56][1],0,segments,0,spiflashPL[0][0],spiflashPL[0][1],spiflashPL[0][2],spiflashPL[1][0]-0.5,spiflashPL[1][1],0,segments,0,0);
track(rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[55][0],rp2040PL[55][1],0,segments,0,spiflashPL[0][0],spiflashPL[0][1],spiflashPL[0][2],spiflashPL[2][0]-0.5,spiflashPL[2][1],0,segments,0,0);
track(rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],rp2040PL[54][0],rp2040PL[54][1],0,segments,0,spiflashPL[0][0],spiflashPL[0][1],spiflashPL[0][2],spiflashPL[3][0]-0.5,spiflashPL[3][1],0,segments,0,0);

border();
rp2040FP(rp2040PL[0][0],rp2040PL[0][1],rp2040PL[0][2],0);
USBFP(USBPL[0][0],USBPL[0][1],USBPL[0][2],"Homemade","USB-B",0);
DPAKFP(DPAKPL[0][0],DPAKPL[0][1],DPAKPL[0][2],0);
o6o3FP(5.3,12,0,0," ");
o6o3FP(5.3,13,0,0," ");
o6o3FP(-2-0.1,21.1,90,0,"100n");
o6o3FP(-0.5-0.1,21.1,90,0,"10u");
spiflashFP(spiflashPL[0][0],spiflashPL[0][1],spiflashPL[0][2],"SPIFLASH","16Mb",0);
chrystalFP(chrystalPL[0][0],chrystalPL[0][1],chrystalPL[0][2],0);
o6o3FP(chrystalPL[0][0]+chrystalPL[3][0]-1.9,chrystalPL[0][1]+chrystalPL[3][1]+2,90,0,"R1k");
o6o3FP(chrystalPL[0][0]+chrystalPL[1][0]-0.5,chrystalPL[0][1]+chrystalPL[1][1]-2,90,0,"15p");
o6o3FP(chrystalPL[0][0]+chrystalPL[1][0]+0.5,chrystalPL[0][1]+chrystalPL[1][1]-2,90,0,"15p");
o6o3FP(rp2040PL[0][0]+rp2040PL[3][0]+2.9,rp2040PL[0][1]+rp2040PL[3][1]+1.75,46,0,"470");
o6o3FP(rp2040PL[0][0]+rp2040PL[3][0]+3.8,rp2040PL[0][1]+rp2040PL[3][1]+0.4,-44,0,"LED");
o6o3FP(rp2040PL[0][0]+rp2040PL[3][0]+2.7,rp2040PL[0][1]+rp2040PL[3][1]-0.5,101,0,"23 24");
sot523FP(sot523PL[0][0],sot523PL[0][1],sot523PL[0][2],0);
o6o3FP(sot523PL[0][0]+sot523PL[3][0]+0.8,sot523PL[0][1]+sot523PL[3][1]+3.4,90,0,"100k");
o6o3FP(sot523PL[0][0]+sot523PL[3][0]-0.1,sot523PL[0][1]+sot523PL[3][1]+3.4,90,0,"1nF");
o6o3FP(sot523PL[0][0]+sot523PL[3][0]-1,sot523PL[0][1]+sot523PL[3][1]+2.6,90,0,"200k");
o6o3FP(picoPL[0][0]+picoPL[35][0]-1.4,picoPL[0][1]+picoPL[35][1]+1.1,90,0,"200");
o6o3FP(picoPL[0][0]+picoPL[35][0]-1.5,picoPL[0][1]+picoPL[35][1]-1.1,90,0,"2u2");
o6o3FP(picoPL[0][0]+picoPL[35][0]-2.5,picoPL[0][1]+picoPL[35][1]-1.1,90,0,"1ohm");
o6o3FP(sot523PL[0][0]+sot523PL[3][0]-1,sot523PL[0][1]+sot523PL[3][1]+2.6,90,0,"200k");
o6o3FP(2.8,11.7,90,0,"100n");
o6o3FP(2.8,15.9,100,0,"100n");
}    

//   ****            MODULES       ****
module track (startcompx,startcompy,srotation,spinx,spiny,starttype,startdivider,startpad,endcompx,endcompy,erotation,epinx,epiny,endtype,enddivider,endpad,room) {
    //color("red")translate([startcompx,startcompy,0])rotate([0,0,srotation])translate([spinx,spiny,0])cylinder(5,0.2,0.2,center=true);
    //color("green")translate([endcompx,endcompy,0])rotate([0,0,erotation])translate([epinx,epiny,0])cylinder(5,0.2,0.2,center=true);
   
    
    startradius=sqrt(spinx*spinx+spiny*spiny);
    endradius=sqrt(epinx*epinx+epiny*epiny);
    
    oldangle=[90-(spinx/abs(spinx))*-asin(spinx/startradius),90+(epinx/abs(epinx))*asin(epinx/endradius)];
    newangle=[ oldangle[0]+srotation*(epiny/abs(epiny)),oldangle[1]+erotation*(epinx/abs(epinx))*-(epiny/abs(epiny))];
    
    coords=[ [startradius*cos(newangle[0])*-(spinx/(abs(spinx))), startradius*sin(newangle[0])*(spiny/(abs(spiny)))],[endradius*sin(-90-newangle[1])*(epinx/(abs(epinx))),endradius*sin(newangle[1])*(epiny/(abs(epiny)))] ];
    
    startx=startcompx+coords[0][0];
    starty=startcompy+coords[0][1];
    endx=endcompx+coords[1][0];
    endy=endcompy+coords[1][1];
   
    startendx=startx+(endx-startx)*abs(room-0.5);
    startendy=starty+(endy-starty)*abs(room-0.5);
    incrementxs=(startendx-startx)/(startdivider);
    incrementys=(startendy-starty)/(startdivider);
    incrementxe=(endx-startendx)/(enddivider);
    incrementye=(endy-startendy)/(enddivider);
    
    midpoint=[startendx,startendy];
    curve=(startdivider);
    pointsstart = [
[startx,starty],[startx+1*incrementxs,starty+1*incrementys],[startx+2*incrementxs,starty+2*incrementys],[startx+3*incrementxs,starty+3*incrementys],[startx+4*incrementxs,starty+4*incrementys],[startx+5*incrementxs,starty+5*incrementys],[startx+6*incrementxs,starty+6*incrementys],[startx+7*incrementxs,starty+7*incrementys],[startx+8*incrementxs,starty+8*incrementys],[startx+9*incrementxs,starty+9*incrementys],[startx+10*incrementxs,starty+10*incrementys],[startx+11*incrementxs,starty+11*incrementys],[startx+12*incrementxs,starty+12*incrementys],[startx+13*incrementxs,starty+13*incrementys],[startendx,startendy]];
    pointsend = [
    [startendx,startendy],[startendx+1*incrementxe,startendy+1*incrementye], [startendx+2*incrementxe,startendy+2*incrementye], [startendx+3*incrementxe,startendy+3*incrementye],[startendx+4*incrementxe,startendy+4*incrementye],[startendx+5*incrementxe,startendy+5*incrementye],[startendx+6*incrementxe,startendy+6*incrementye],[startendx+7*incrementxe,startendy+7*incrementye],[startendx+8*incrementxe,startendy+8*incrementye],[startendx+9*incrementxe,startendy+9*incrementye],[startendx+10*incrementxe,startendy+10*incrementye],[startendx+11*incrementxe,startendy+11*incrementye],[startendx+12*incrementxe,startendy+12*incrementye],[startendx+13*incrementxe,startendy+13*incrementye],[endx,endy]];
    
    pointsHcurvestart = [
[startx,starty],
[startx+1*incrementxs,starty+1*incrementys+startdivider*0.2*sin(1*90/(startdivider/2))],
[startx+2*incrementxs,starty+2*incrementys-startdivider*0.2*sin(2*90/(startdivider/2))],
[startx+3*incrementxs,starty+3*incrementys-startdivider*0.2*sin(3*90/(startdivider/2))],
[startx+4*incrementxs,starty+4*incrementys-startdivider*0.2*sin(4*90/(startdivider/2))],
[startx+5*incrementxs,starty+5*incrementys-startdivider*0.2*sin(5*90/(startdivider/2))],
[startx+6*incrementxs,starty+6*incrementys-startdivider*0.2*sin(6*90/(startdivider/2))],
[startx+7*incrementxs,starty+7*incrementys-startdivider*0.2*sin(7*90/(startdivider/2))],
[startx+8*incrementxs,starty+8*incrementys-startdivider*0.2*sin(8*90/(startdivider/2))],
[startx+9*incrementxs,starty+9*incrementys-startdivider*0.2*sin(9*90/(startdivider/2))],
[startx+10*incrementxs,starty+10*incrementys-startdivider*0.2*sin(10*90/(startdivider/2))],
[startx+11*incrementxs,starty+11*incrementys-startdivider*0.2*sin(11*90/(startdivider/2))],
[startx+12*incrementxs,starty+12*incrementys-startdivider*0.2*sin(12*90/(startdivider/2))],
[startx+13*incrementxs,starty+13*incrementys-startdivider*0.2*sin(13*90/(startdivider/2))],
[startendx,startendy]];
    
    pointsHcurveend = [
[startendx,startendy],
[startendx+1*incrementxe+enddivider*0.2*sin(1*90/(enddivider/2)),startendy+1*incrementye], 
[startendx+2*incrementxe+enddivider*0.2*sin(2*90/(enddivider/2)),startendy+2*incrementye], 
[startendx+3*incrementxe+enddivider*0.2*sin(3*90/(enddivider/2)),startendy+3*incrementye],
[startendx+4*incrementxe+enddivider*0.2*sin(4*90/(enddivider/2)),startendy+4*incrementye],
[startendx+5*incrementxe+enddivider*0.2*sin(5*90/(enddivider/2)),startendy+5*incrementye],
[startendx+6*incrementxe+enddivider*0.2*sin(6*90/(enddivider/2)),startendy+6*incrementye],
[startendx+7*incrementxe+enddivider*0.2*sin(7*90/(enddivider/2)),startendy+7*incrementye],
[startendx+8*incrementxe+enddivider*0.2*sin(8*90/(enddivider/2)),startendy+8*incrementye],
[startendx+9*incrementxe+enddivider*0.2*sin(9*90/(enddivider/2)),startendy+9*incrementye],
[startendx+10*incrementxe+enddivider*0.2*sin(10*90/(enddivider/2)),startendy+10*incrementye],
[startendx+11*incrementxe+enddivider*0.2*sin(11*90/(enddivider/2)),startendy+11*incrementye],
[startendx+12*incrementxe+enddivider*0.2*sin(12*90/(enddivider/2)),startendy+12*incrementye],
[startendx+13*incrementxe+enddivider*0.2*sin(13*90/(enddivider/2)),startendy+13*incrementye],
[endx,endy]];
    
    pointsVcurvestart = [
[startx,starty],
[startx+1*incrementxs+startdivider*0.2*sin(1*90/(startdivider/2)),starty+1*incrementys],
[startx+2*incrementxs+startdivider*0.2*sin(2*90/(startdivider/2)),starty+2*incrementys],
[startx+3*incrementxs+startdivider*0.2*sin(3*90/(startdivider/2)),starty+3*incrementys],
[startx+4*incrementxs+startdivider*0.2*sin(4*90/(startdivider/2)),starty+4*incrementys],
[startx+5*incrementxs-startdivider*sin(5*90/(startdivider/2)),starty+5*incrementys],
[startx+6*incrementxs-startdivider*sin(6*90/(startdivider/2)),starty+6*incrementys],
[startx+7*incrementxs-startdivider*sin(7*90/(startdivider/2)),starty+7*incrementys],
[startx+8*incrementxs-startdivider*sin(8*90/(startdivider/2)),starty+8*incrementys],
[startx+9*incrementxs-startdivider*sin(9*90/(startdivider/2)),starty+9*incrementys],
[startx+10*incrementxs-startdivider*sin(10*90/(startdivider/2)),starty+10*incrementys],
[startx+11*incrementxs-startdivider*sin(11*90/(startdivider/2)),starty+11*incrementys],
[startx+12*incrementxs-startdivider*sin(12*90/(startdivider/2)),starty+12*incrementys],
[startx+13*incrementxs-startdivider*sin(13*90/(startdivider/2)),starty+13*incrementys],
[startendx,startendy]];
    
    pointsVcurveend = [[startendx,startendy],
[startendx+1*incrementxe-enddivider*0.2*sin(1*90/(enddivider/2)),startendy+1*incrementye], 
[startendx+2*incrementxe-enddivider*0.2*sin(2*90/(enddivider/2)),startendy+2*incrementye], 
[startendx+3*incrementxe-enddivider*0.2*sin(3*90/(enddivider/2)),startendy+3*incrementye],
[startendx+4*incrementxe-enddivider*0.2*sin(4*90/(enddivider/2)),startendy+4*incrementye],
[startendx+5*incrementxe-enddivider*0.2*sin(5*90/(enddivider/2)),startendy+5*incrementye],
[startendx+6*incrementxe-enddivider*0.2*sin(6*90/(enddivider/2)),startendy+6*incrementye],
[startendx+7*incrementxe-enddivider*0.2*sin(7*90/(enddivider/2)),startendy+7*incrementye],
[startendx+8*incrementxe-enddivider*0.2*sin(8*90/(enddivider/2)),startendy+8*incrementye],
[startendx+9*incrementxe-enddivider*0.2*sin(9*90/(enddivider/2)),startendy+9*incrementye],
[startendx+10*incrementxe-enddivider*0.2*sin(10*90/(enddivider/2)),startendy+10*incrementye],
[startendx+11*incrementxe-enddivider*0.2*sin(11*90/(enddivider/2)),startendy+11*incrementye],
[startendx+12*incrementxe-enddivider*0.2*sin(12*90/(enddivider/2)),startendy+12*incrementye],
[startendx+13*incrementxe-enddivider*0.2*sin(13*90/(enddivider/2)),startendy+13*incrementye],
[endx,endy]];
//    color("chocolate")translate([pointsstart[0][0],pointsstart[0][1],0])circle(0.3);
//    for (i=[1:1:startdivider]){
//        color("red")translate([pointsstart[i][0],pointsstart[i][1]-startdivider*sin(i*90/(startdivider/2)),0])circle(0.3);
//   }
    for (k=[1:1:startdivider]){
            if (starttype==0){
                updowntest1=pointsstart[k][1]-pointsstart[k-1][1];
            translate([pointsstart[k][0]+(pointsstart[k-1][0]-pointsstart[k][0])/2,pointsstart[k][1]+(pointsstart[k-1][1]-pointsstart[k][1])/2,1])rotate([0,0,90+(updowntest1/(abs(updowntest1)))*asin((pointsstart[k-1][0]-pointsstart[k][0])/sqrt((pointsstart[k-1][0]-pointsstart[k][0])*(pointsstart[k-1][0]-pointsstart[k][0])+(pointsstart[k-1][1]-pointsstart[k][1])*(pointsstart[k-1][1]-pointsstart[k][1])))])square([sqrt((pointsstart[k-1][0]-pointsstart[k][0])*(pointsstart[k-1][0]-pointsstart[k][0])+(pointsstart[k-1][1]-pointsstart[k][1])*(pointsstart[k-1][1]-pointsstart[k][1])),trace+round(room)*clearance],center=true);
            
        }           
            }
    for (l=[1:1:enddivider-1]){
            if (endtype==0){
                updowntest2=pointsend[l][1]-pointsend[l-1][1];
               translate([pointsend[l][0]+(pointsend[l-1][0]-pointsend[l][0])/2,pointsend[l][1]+(pointsend[l-1][1]-pointsend[l][1])/2,1])rotate([0,0,90+(updowntest2/(abs(updowntest2)))*asin((pointsend[l-1][0]-pointsend[l][0])/sqrt((pointsend[l-1][0]-pointsend[l][0])*(pointsend[l-1][0]-pointsend[l][0])+(pointsend[l-1][1]-pointsend[l][1])*(pointsend[l-1][1]-pointsend[l][1])))])square([sqrt((pointsend[l-1][0]-pointsend[l][0])*(pointsend[l-1][0]-pointsend[l][0])+(pointsend[l-1][1]-pointsend[l][1])*(pointsend[l-1][1]-pointsend[l][1])),trace+round(room)*clearance],center=true);
          
         if(l==enddivider-1) {
             updowntest5=endy-pointsHcurveend[l][1];
             translate([endx+(pointsend[l-1][0]-endx)/2,endy+(pointsend[l-1][1]-endy)/2,1])rotate([0,0,90+(updowntest5/(abs(updowntest5)))*asin((pointsend[l-1][0]-endx)/sqrt((pointsend[l-1][0]-endx)*(pointsend[l-1][0]-endx)+(pointsend[l-1][1]-endy)*(pointsend[l-1][1]-endy)))])square([sqrt((pointsend[l-1][0]-endx)*(pointsend[l-1][0]-endx)+(pointsend[l-1][1]-endy)*(pointsend[l-1][1]-endy)),trace+round(room)*clearance],center=true);
       
        }  }       
            }       
           for (m=[1:1:startdivider]){
            if (starttype==1){
                updowntest3=pointsHcurvestart[m][1]-pointsHcurvestart[m-1][1];
                translate([pointsHcurvestart[m][0]+(pointsHcurvestart[m-1][0]-pointsHcurvestart[m][0])/2,pointsHcurvestart[m][1]+(pointsHcurvestart[m-1][1]-pointsHcurvestart[m][1])/2,1])rotate([0,0,90+(updowntest3/(abs(updowntest3)))*asin((pointsHcurvestart[m-1][0]-pointsHcurvestart[m][0])/sqrt((pointsHcurvestart[m-1][0]-pointsHcurvestart[m][0])*(pointsHcurvestart[m-1][0]-pointsHcurvestart[m][0])+(pointsHcurvestart[m-1][1]-pointsHcurvestart[m][1])*(pointsHcurvestart[m-1][1]-pointsHcurvestart[m][1])))])square([sqrt((pointsHcurvestart[m-1][0]-pointsHcurvestart[m][0])*(pointsHcurvestart[m-1][0]-pointsHcurvestart[m][0])+(pointsHcurvestart[m-1][1]-pointsHcurvestart[m][1])*(pointsHcurvestart[m-1][1]-pointsHcurvestart[m][1]))+clearance,trace+round(room)*clearance],center=true);

             }
             
            }
    for (n=[1:1:enddivider-1]){
            if (endtype==1){
                updowntest4=pointsHcurveend[n][1]-pointsHcurveend[n-1][1];
                translate([pointsHcurveend[n][0]+(pointsHcurveend[n-1][0]-pointsHcurveend[n][0])/2,pointsHcurveend[n][1]+(pointsHcurveend[n-1][1]-pointsHcurveend[n][1])/2,1])rotate([0,0,90+(updowntest4/(abs(updowntest4)))*asin((pointsHcurveend[n-1][0]-pointsHcurveend[n][0])/sqrt((pointsHcurveend[n-1][0]-pointsHcurveend[n][0])*(pointsHcurveend[n-1][0]-pointsHcurveend[n][0])+(pointsHcurveend[n-1][1]-pointsHcurveend[n][1])*(pointsHcurveend[n-1][1]-pointsHcurveend[n][1])))])square([sqrt((pointsHcurveend[n-1][0]-pointsHcurveend[n][0])*(pointsHcurveend[n-1][0]-pointsHcurveend[n][0])+(pointsHcurveend[n-1][1]-pointsHcurveend[n][1])*(pointsHcurveend[n-1][1]-pointsHcurveend[n][1]))+clearance,trace+round(room)*clearance],center=true);//}
                if(n==enddivider-1) {
                 updowntest6=endy-pointsHcurveend[n][1];
                 translate([endx+(pointsHcurveend[n][0]-endx)/2,endy+(pointsHcurveend[n][1]-endy)/2,1])rotate([0,0,90+(updowntest6/(abs(updowntest6)))*asin((pointsHcurveend[n][0]-endx)/sqrt((pointsHcurveend[n][0]-endx)*(pointsHcurveend[n][0]-endx)+(pointsHcurveend[n][1]-endy)*(pointsHcurveend[n][1]-endy)))])square([sqrt((pointsHcurveend[n][0]-endx)*(pointsHcurveend[n][0]-endx)+(pointsHcurveend[n][1]-endy)*(pointsHcurveend[n][1]-endy))+clearance,trace+round(room)*clearance],center=true);
          
             }
            }
            }  
       
       for (q=[1:1:startdivider]){
            if (starttype==2){
                updowntest3=pointsVcurvestart[q][1]-pointsVcurvestart[q-1][1];
                translate([pointsVcurvestart[q][0]+(pointsVcurvestart[q-1][0]-pointsVcurvestart[q][0])/2,pointsVcurvestart[q][1]+(pointsVcurvestart[q-1][1]-pointsVcurvestart[q][1])/2,1])rotate([0,0,90+(updowntest3/(abs(updowntest3)))*asin((pointsVcurvestart[q-1][0]-pointsVcurvestart[q][0])/sqrt((pointsVcurvestart[q-1][0]-pointsVcurvestart[q][0])*(pointsVcurvestart[q-1][0]-pointsVcurvestart[q][0])+(pointsVcurvestart[q-1][1]-pointsVcurvestart[q][1])*(pointsVcurvestart[q-1][1]-pointsVcurvestart[q][1])))])square([sqrt((pointsVcurvestart[q-1][0]-pointsVcurvestart[q][0])*(pointsVcurvestart[q-1][0]-pointsVcurvestart[q][0])+(pointsVcurvestart[q-1][1]-pointsVcurvestart[q][1])*(pointsVcurvestart[q-1][1]-pointsVcurvestart[q][1]))+clearance,trace+round(room)*clearance],center=true);

             }
             
            }
    for (r=[1:1:enddivider-1]){
            if (endtype==2){
                updowntest4=pointsVcurveend[r][1]-pointsVcurveend[r-1][1];
                translate([pointsVcurveend[r][0]+(pointsVcurveend[r-1][0]-pointsVcurveend[r][0])/2,pointsVcurveend[r][1]+(pointsVcurveend[r-1][1]-pointsVcurveend[r][1])/2,1])rotate([0,0,90+(updowntest4/(abs(updowntest4)))*asin((pointsVcurveend[r-1][0]-pointsVcurveend[r][0])/sqrt((pointsVcurveend[r-1][0]-pointsVcurveend[r][0])*(pointsVcurveend[r-1][0]-pointsVcurveend[r][0])+(pointsVcurveend[r-1][1]-pointsVcurveend[r][1])*(pointsVcurveend[r-1][1]-pointsVcurveend[r][1])))])square([sqrt((pointsVcurveend[r-1][0]-pointsVcurveend[r][0])*(pointsVcurveend[r-1][0]-pointsVcurveend[r][0])+(pointsVcurveend[r-1][1]-pointsVcurveend[r][1])*(pointsVcurveend[r-1][1]-pointsVcurveend[r][1]))+clearance,trace+round(room)*clearance],center=true);//}
                if(r==enddivider-1) {
                 updowntest6=endy-pointsVcurveend[r][1];
                 translate([endx+(pointsVcurveend[r][0]-endx)/2,endy+(pointsVcurveend[r][1]-endy)/2,1])rotate([0,0,90+(updowntest6/(abs(updowntest6)))*asin((pointsVcurveend[r][0]-endx)/sqrt((pointsVcurveend[r][0]-endx)*(pointsVcurveend[r][0]-endx)+(pointsVcurveend[r][1]-endy)*(pointsVcurveend[r][1]-endy)))])square([sqrt((pointsVcurveend[r][0]-endx)*(pointsVcurveend[r][0]-endx)+(pointsVcurveend[r][1]-endy)*(pointsVcurveend[r][1]-endy))+clearance,trace+round(room)*clearance],center=true);
          
             }
            }
            }      
//    for (j=[0:1:enddivider]){     
//color("green")translate([pointsend[j][0],pointsend[j][1]+enddivider*sin(j*90/(enddivider/2)),0])circle(0.3);
//        echo(pointsend[j][0]);
//}color("chocolate")translate([pointsend[len(pointsend)-1][0],pointsend[len(pointsend)-1][1],0])circle(0.3); 
//(startx,starty,starttype,startdivider,startpad,endx,endy,endtype,enddivider,endpad,round(room))
difference(){
     union(){
         translate([0,0,0]) linear_extrude(2){
if (startpad==1)translate([startx,starty,0])rotate([0,0,360/(4*detail)])circle(pad+clearance*round(room), $fn=detail);
if (startpad==2)translate([startx,starty,0])rotate([0,0,360/(4*detail)])circle(pad*0.75+clearance*round(room), $fn=detail);
    if (startpad==3)translate([startx,starty,0])rotate([0,0,360/(4*detail)]){
        for (s=[360/(2*detail):360/detail:360+360/detail])rotate([0,0,s])square([pad*0.75+clearance,trace],center=false);
            circle(pad*0.75+clearance*round(room), $fn=detail);
            }
if (endpad==1)translate([endx,endy,0])rotate([0,0,360/(4*detail)])circle(pad+clearance*round(room), $fn=detail);
if (endpad==2)translate([endx,endy,0])rotate([0,0,360/(4*detail)])circle(pad*0.75+clearance*round(room), $fn=detail);
    if (endpad==3)translate([endx,endy,0])rotate([0,0,360/(4*detail)]){
        for (t=[360/(2*detail):360/detail:360+360/detail])rotate([0,0,t])square([pad*0.75+clearance,trace],center=false);
            circle(pad*0.75+clearance*round(room), $fn=detail);
            }
       }
if (startpad==0)translate([startx,starty,1])circle(trace/2+clearance*round(room));
if (endpad==0)translate([endx,endy,1])circle(trace/2+clearance*round(room));
    }
    if (startpad==1)  translate([startx,starty,0])rotate([0,0,360/(4*detail)])cylinder(15,holeradius,holeradius,center=true);
if (endpad==1) translate([endx,endy,0])rotate([0,0,360/(4*detail)])cylinder(15,holeradius,holeradius,center=true);
    if (startpad==2)  translate([startx,starty,0])rotate([0,0,360/(4*detail)])cylinder(15,holeradius,holeradius,center=true);
if (endpad==2) translate([endx,endy,0])rotate([0,0,360/(4*detail)])cylinder(15,holeradius,holeradius,center=true);
   }        
    }
   
module label(posx,posy,rotation,mirr,labeltext,size,labelfont) {
      translate([0,0,-1])linear_extrude(6){
translate([posx,posy])rotate([0,0,rotation])mirror([mirr,0,0])text(labeltext,size,font=labelfont);
}
}
module chrystalFP(x,y,rotation,room){
     translate([x,y,0])rotate([0,0,rotation])linear_extrude(2){
        for(i=[1:1:4])
            difference(){
   translate([chrystalPL[i][0],chrystalPL[i][1],0])square([1.3+round(room)*clearance,1.1+round(room)*clearance],center=true);
   if (round(room)==0){translate([chrystalPL[i][0]-0.3,chrystalPL[i][1]-0.3,0])text(str(i),0.5);}}
        }
}
module USBFP(x,y,rotation,name,value,room){
    translate([x,y,0.5])rotate([0,0,rotation])linear_extrude(1){
   translate([USBPL[1][0],USBPL[1][1],0])difference(){circle(pad+round(room)*clearance); circle(holeradius);}
   translate([USBPL[2][0],USBPL[2][1],0])difference(){circle(pad+round(room)*clearance); circle(holeradius);}
   translate([USBPL[3][0],USBPL[3][1],0])difference(){circle(pad+round(room)*clearance); circle(holeradius);}
   translate([USBPL[4][0],USBPL[4][1],0])difference(){circle(pad+round(room)*clearance); circle(holeradius);}
   if (round(room)!=0){translate([-3.5,0.92,0])text(name,0.3);
   translate([-0.5,0.92,0])text(value,0.3);}
}}
module spiflashFP(x,y,rotation,name,value,room){
    translate([x,y,0])rotate([0,0,rotation])linear_extrude(2){
   translate([0,0,0])square([0.4+round(room)*clearance,1.9+round(room)*clearance],center=true);
   translate([spiflashPL[1][0],spiflashPL[1][1],0])square([1+round(room)*clearance,0.25+round(room)*clearance],center=true);
       translate([spiflashPL[2][0],spiflashPL[2][1],0])square([1+round(room)*clearance,0.25+round(room)*clearance],center=true);
       translate([spiflashPL[3][0],spiflashPL[3][1],0])square([1+round(room)*clearance,0.25+round(room)*clearance],center=true);
       translate([spiflashPL[4][0],spiflashPL[4][1],0])square([1+round(room)*clearance,0.25+round(room)*clearance],center=true);
       translate([spiflashPL[5][0],spiflashPL[5][1],0])square([1+round(room)*clearance,0.25+round(room)*clearance],center=true);
       translate([spiflashPL[6][0],spiflashPL[6][1],0])square([1+round(room)*clearance,0.25+round(room)*clearance],center=true);
       translate([spiflashPL[7][0],spiflashPL[7][1],0])square([1+round(room)*clearance,0.25+round(room)*clearance],center=true);
       translate([spiflashPL[8][0],spiflashPL[8][1],0])square([1+round(room)*clearance,0.25+round(room)*clearance],center=true);
   if (round(room)!=0){translate([-0.4,-0.9,0])rotate([0,0,90])text(name,0.28);
   translate([0.7,-0.4,0])rotate([0,0,90])text(value,0.3);}
}}
module o6o3FP(x,y,rotation,room,value){
    translate([x,y,0])rotate([0,0,rotation])linear_extrude(2){
   translate([o6o3PL[1][0],o6o3PL[1][1],0])square(0.8+round(room)*clearance,center=true);
   translate([o6o3PL[2][0],o6o3PL[2][1],0])square(0.8+round(room)*clearance,center=true);
  
   if(round(room)!=0){translate([-0.2,0.4,0])rotate([0,0,-90])text(value,0.3);}
}}
module DPAKFP(x,y,rotation,room){
    translate([x,y,0])rotate([0,0,rotation])linear_extrude(2){
        translate([DPAKPL[1][0],DPAKPL[1][1],0])square(6.7+round(room)*clearance*2,center=true);
        translate([DPAKPL[2][0],DPAKPL[2][1],0])square([3+round(room)*clearance*2,1.6+round(room)*clearance*2],center=true);
        translate([DPAKPL[3][0],DPAKPL[3][1],0])square([3+round(room)*clearance*2,1.6+round(room)*clearance*2],center=true);
}}

module sot523FP(x,y,rotation,room){
   translate([x,y,0])rotate([0,0,rotation])linear_extrude(2){
        translate([sot523PL[1][0],sot523PL[1][1],0])square([0.4+round(room)*clearance,0.51+round(room)*clearance],center=true);
        translate([sot523PL[2][0],sot523PL[2][1],0])square([0.4+round(room)*clearance,0.51+round(room)*clearance],center=true);
        translate([sot523PL[3][0],sot523PL[3][1],0])square([0.4+round(room)*clearance,0.51+round(room)*clearance],center=true);  
}}
module rp2040FP(x,y,rotation,room){
    translate([x,y,0])rotate([0,0,rotation])linear_extrude(2){
        square(3.2+round(room)*clearance,center=true);
        for(a=[0:90:359]){
        for (b=[2.6:-0.4:-2.6]){
            rotate([0,0,a])translate([7.26/2,b,0])square([1+round(room)*clearance,0.2+round(room)*clearance],center=true);
            if(round(room)!=0){rotate([0,0,a+180])translate([7.26/2-0.7,b,0])rotate([0,0,-a+180])translate([-0.1,-0.1,0])text(str((a/90)*14+((b+2.6)/0.4)+1),0.15);}
        }
    }
    translate([-7.26/2,7.26/2,0])circle(0.3+round(room)*clearance);
    }
}

module border(){
 translate([0,0,1])difference(){
cube([width+3*frame,heigth+3*frame,0.2],center=true);
cube([width-frame,heigth-frame,4],center=true);
}  
}

module copperclad (){
translate([0,0,1])color("black")linear_extrude(0.1)polygon([[width/2,heigth/2],[width/2,-heigth/2],[-width/2,-heigth/2],[-width/2,heigth/2]]);  
}
