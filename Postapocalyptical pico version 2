 //Here is my postapocalyptical pico, made mostly with parts I have on hand.
//Todo: 
//Chekt if th DPAK even fits. 
//Write 4 trace-functions into one smooth curve.    Check
//Angle everything.                                 Halvcheck
//ground points #3.
//add vertical curve at 2
//Reduce track input to component and pin somehow  

//Input parameters

pad=1.0;
trace=0.23;
holeradius=0.2;
clearance=0.3;
offsetY=0;
offsetX=0;
detail=5;
frame=0.6;
heigth=51;
width=21;
//components input, center x, y and rotation, then pin coordinates relative to center of component

chryst=[
[-1,-18,0],[-1.15,-0.95],[1.15,-0.95],[1.15,0.95],[-1.15,0.95]];
DPAK=[
[-1.5, 17, 90],[-6.7/2,0],[1.8+1.5,2.30],[1.8+1.5,-2.30]
];
homebrusb=[
[0, 51/2-1.6, 0],[-2.54*1.5,0],
[-2.54*0.5,0],[2.54*0.5,0],[2.54*1.5,0]
];
osixothree=[
[0, 0, 0],[0.7/2+0.8/2,0],[-0.7/2-0.8/2,0]
];
pico=[
[0, 0, 0],[-17.78/2,48.26/2],[-17.78/2,48.26/2-2.54*1],[-17.78/2,48.26/2-2.54*2],[-17.78/2,48.26/2-2.54*3],[-17.78/2,48.26/2-2.54*4],[-17.78/2,48.26/2-2.54*5],[-17.78/2,48.26/2-2.54*6],[-17.78/2,48.26/2-2.54*7],[-17.78/2,48.26/2-2.54*8],[-17.78/2,48.26/2-2.54*9],[-17.78/2,48.26/2-2.54*10],[-17.78/2,48.26/2-2.54*11],[-17.78/2,48.26/2-2.54*12],[-17.78/2,48.26/2-2.54*13],[-17.78/2,48.26/2-2.54*14],[-17.78/2,48.26/2-2.54*15],[-17.78/2,48.26/2-2.54*16],[-17.78/2,48.26/2-2.54*17],[-17.78/2,48.26/2-2.54*18],[-17.78/2,48.26/2-2.54*19],[17.78/2,48.26/2-2.54*19],[17.78/2,48.26/2-2.54*18],[17.78/2,48.26/2-2.54*17],[17.78/2,48.26/2-2.54*16],[17.78/2,48.26/2-2.54*15],[17.78/2,48.26/2-2.54*14],[17.78/2,48.26/2-2.54*13],[17.78/2,48.26/2-2.54*12],[17.78/2,48.26/2-2.54*11],[17.78/2,48.26/2-2.54*10],[17.78/2,48.26/2-2.54*9],[17.78/2,48.26/2-2.54*8],[17.78/2,48.26/2-2.54*7],[17.78/2,48.26/2-2.54*6],[17.78/2,48.26/2-2.54*5],[17.78/2,48.26/2-2.54*4],[17.78/2,48.26/2-2.54*3],[17.78/2,48.26/2-2.54*2],[17.78/2,48.26/2-2.54*1],[17.78/2,48.26/2],[-2.54,-51/2+1.6],[0,-51/2+1.6],[2.54,-51/2+1.6]
];
rp2040=[
[0,-10,-30],
[-8.25/2,+2.6],[-8.25/2,+2.2],[-8.25/2,1.8],[-8.25/2,1.4],[-8.25/2,1.0],[-8.25/2,0.6],[-8.25/2,0.2],[-8.25/2,-0.2],[-8.25/2,-0.6],[-8.25/2,-1],[-8.25/2,-1.4],[-8.25/2,-1.8],[-8.25/2,-2.2],[-8.25/2,-2.6],
[-2.6,-8.25/2],[-2.2,-8.25/2],[-1.8,-8.25/2],[-1.4,-8.25/2],[-1,-8.25/2],[-0.6,-8.25/2],[-0.2,-8.25/2],[0.2,-8.25/2],[0.6,-8.25/2],[1,-8.25/2],[1.4,-8.25/2],[1.8,-8.25/2],[2.2,-8.25/2],[2.6,-8.25/2],
[8.25/2,-2.6],[8.25/2,-2.2],[8.25/2,-1.8],[8.25/2,-1.4],[8.25/2,-1],[8.25/2,-0.6],[8.25/2,-0.2],[8.25/2,0.2],[8.25/2,0.6],[8.25/2,1],[8.25/2,1.4],[8.25/2,1.8],[8.25/2,2.2],[8.25/2,2.6],
[2.6,8.25/2],[2.2,8.25/2],[1.8,8.25/2],[1.4,8.25/2],[1.0,8.25/2],[0.6,8.25/2],[0.2,8.25/2],[-0.2,8.25/2],[-0.6,8.25/2],[-1,8.25/2],[-1.4,8.25/2],[-1.8,8.25/2],[-2.2,8.25/2],[-2.6,8.25/2]];
spiflash16mb=[
[-1,9,0],[-3/2,0.75],[-3/2,0.25],[-3/2,-0.25],[-3/2,-0.75],[3/2,-0.75],[3/2,-0.25],[3/2,0.25],[3/2,0.75]];
sot523=[
[5,3.8,48],[-0.5,-1.29/2],[0,1.29/2],[0.5,-1.29/2]];

//  MAIN  code starts here where various modules are called

difference(){
copperclad(); 
   
color("white")union(){


track(pico[0][0],pico[0][1],pico[0][2],pico[1][0],pico[1][1],2,4,2,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[2][0],rp2040[2][1],2,4,0,1);
track(pico[0][0],pico[0][1],pico[0][2],pico[2][0],pico[2][1],2,3,2,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[3][0],rp2040[3][1],2,3,0,1);

track(pico[0][0],pico[0][1],pico[0][2],pico[4][0],pico[4][1],0,3,2,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[4][0],rp2040[4][1],0,3,0,1);
track(pico[0][0],pico[0][1],pico[0][2],pico[5][0],pico[5][1],0,3,2,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[5][0],rp2040[5][1],0,3,0,1);
track(pico[0][0],pico[0][1],pico[0][2],pico[6][0],pico[6][1],0,3,2,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[6][0],rp2040[6][1],0,3,0,1);
track(pico[0][0],pico[0][1],pico[0][2],pico[7][0],pico[7][1],0,3,2,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[7][0],rp2040[7][1],0,3,0,1);

track(pico[0][0],pico[0][1],pico[0][2],pico[9][0],pico[9][1],0,3,2,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[8][0],rp2040[8][1],0,3,0,1);
track(pico[0][0],pico[0][1],pico[0][2],pico[10][0],pico[10][1],0,3,2,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[9][0],rp2040[9][1],0,3,0,1);
track(pico[0][0],pico[0][1],pico[0][2],pico[11][0],pico[11][1],0,3,2,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[11][0],rp2040[11][1],0,3,0,1);
track(pico[0][0],pico[0][1],pico[0][2],pico[12][0],pico[12][1],0,3,1,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[12][0],rp2040[12][1],0,3,0,1);

track(pico[0][0],pico[0][1],pico[0][2],pico[14][0],pico[14][1],0,3,1,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[13][0],rp2040[13][1],0,3,0,1);
track(pico[0][0],pico[0][1],pico[0][2],pico[15][0],pico[15][1],0,3,1,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[14][0],rp2040[14][1],0,3,0,1);  
       

rp20footprint(rp2040[0][0],rp2040[0][1],rp2040[0][2],clearance);    
usbb(homebrusb[0][0],homebrusb[0][1],homebrusb[0][2],"Homemade","USB-B",clearance);
DPAK3V3(DPAK[0][0],DPAK[0][1],DPAK[0][2],clearance);
o6o3(5.3,12,0,clearance," ");
o6o3(5.3,13,0,clearance," ");
o6o3(-2-0.1,21.1,90,clearance,"100n");
o6o3(-0.5-0.1,21.1,90,clearance,"10u");
spiflash(spiflash16mb[0][0],spiflash16mb[0][1],spiflash16mb[0][2],"SPIFLASH","16Mb",clearance);
chrystal(chryst[0][0],chryst[0][1],chryst[0][2],clearance);
o6o3(chryst[0][0]+chryst[3][0]-1.9,chryst[0][1]+chryst[3][1]+2,90,clearance,"R1k");
o6o3(chryst[0][0]+chryst[1][0]-0.5,chryst[0][1]+chryst[1][1]-2,90,clearance,"15p");
o6o3(chryst[0][0]+chryst[1][0]+0.5,chryst[0][1]+chryst[1][1]-2,90,clearance,"15p");
o6o3(rp2040[0][0]+rp2040[3][0]+2.9,rp2040[0][1]+rp2040[3][1]+1.75,46,clearance,"470");
o6o3(rp2040[0][0]+rp2040[3][0]+3.8,rp2040[0][1]+rp2040[3][1]+0.4,-44,clearance,"LED");
o6o3(rp2040[0][0]+rp2040[3][0]+2.7,rp2040[0][1]+rp2040[3][1]-0.5,101,clearance,"23 24");
sot(sot523[0][0],sot523[0][1],sot523[0][2],clearance);
o6o3(sot523[0][0]+sot523[3][0]+0.8,sot523[0][1]+sot523[3][1]+3.4,90,clearance,"100k");
o6o3(sot523[0][0]+sot523[3][0]-0.1,sot523[0][1]+sot523[3][1]+3.4,90,clearance,"1nF");
o6o3(sot523[0][0]+sot523[3][0]-1,sot523[0][1]+sot523[3][1]+2.6,90,clearance,"200k");
o6o3(pico[0][0]+pico[35][0]-1.4,pico[0][1]+pico[35][1]+1.1,90,clearance,"200");
o6o3(pico[0][0]+pico[35][0]-1.5,pico[0][1]+pico[35][1]-1.1,90,clearance,"2u2");
o6o3(pico[0][0]+pico[35][0]-2.5,pico[0][1]+pico[35][1]-1.1,90,clearance,"1ohm");
o6o3(sot523[0][0]+sot523[3][0]-1,sot523[0][1]+sot523[3][1]+2.6,90,clearance,"200k");
o6o3(2.8,11.7,90,clearance,"100n");
o6o3(2.8,15.9,100,clearance,"100n");   
label(2.2,17.5,90,0,"Postapocalyptical", 0.35,"Courier");
label(3.4,18,93,0,"Pico", 1,"Courier");
label(4.5,18,98,0,"open hardware", 0.4,"Courier");
label(3.8,17.9,95,0,"version 1 Melbu april22", 0.23,"Courier");
}}

color("blac k")union(){
//the monster function "track" and its parameters:
// startcompx,startcompy,startrotation,startx,starty,starttype,startdivider,startpad,
//endcompx,endcompy,endrotation,endx,endy,endtype,enddivider,endpad,room


track(pico[0][0],pico[0][1],pico[0][2],pico[1][0],pico[1][1],2,4,2,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[2][0],rp2040[2][1],2,4,0,0);
track(pico[0][0],pico[0][1],pico[0][2],pico[2][0],pico[2][1],2,3,2,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[3][0],rp2040[3][1],2,3,0,0);

track(pico[0][0],pico[0][1],pico[0][2],pico[4][0],pico[4][1],0,3,2,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[4][0],rp2040[4][1],0,3,0,0);
track(pico[0][0],pico[0][1],pico[0][2],pico[5][0],pico[5][1],0,3,2,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[5][0],rp2040[5][1],0,3,0,0);
track(pico[0][0],pico[0][1],pico[0][2],pico[6][0],pico[6][1],0,3,2,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[6][0],rp2040[6][1],0,3,0,0);
track(pico[0][0],pico[0][1],pico[0][2],pico[7][0],pico[7][1],0,3,2,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[7][0],rp2040[7][1],0,3,0,0);

track(pico[0][0],pico[0][1],pico[0][2],pico[9][0],pico[9][1],0,3,2,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[8][0],rp2040[8][1],0,3,0,0);
track(pico[0][0],pico[0][1],pico[0][2],pico[10][0],pico[10][1],0,3,2,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[9][0],rp2040[9][1],0,3,0,0);
track(pico[0][0],pico[0][1],pico[0][2],pico[11][0],pico[11][1],0,3,2,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[11][0],rp2040[11][1],0,3,0,0);
track(pico[0][0],pico[0][1],pico[0][2],pico[12][0],pico[12][1],0,3,1,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[12][0],rp2040[12][1],0,3,0,0);

track(pico[0][0],pico[0][1],pico[0][2],pico[14][0],pico[14][1],0,3,1,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[13][0],rp2040[13][1],0,3,0,0);
track(pico[0][0],pico[0][1],pico[0][2],pico[15][0],pico[15][1],0,3,1,rp2040[0][0],rp2040[0][1],rp2040[0][2],rp2040[14][0],rp2040[14][1],0,3,0,0);  
    
border();
rp20footprint(rp2040[0][0],rp2040[0][1],rp2040[0][2],0);
usbb(homebrusb[0][0],homebrusb[0][1],homebrusb[0][2],"Homemade","USB-B",0);
DPAK3V3(DPAK[0][0],DPAK[0][1],DPAK[0][2],0);
o6o3(5.3,12,0,0," ");
o6o3(5.3,13,0,0," ");
o6o3(-2-0.1,21.1,90,0,"100n");
o6o3(-0.5-0.1,21.1,90,0,"10u");
spiflash(spiflash16mb[0][0],spiflash16mb[0][1],spiflash16mb[0][2],"SPIFLASH","16Mb",0);
chrystal(chryst[0][0],chryst[0][1],chryst[0][2],0);
o6o3(chryst[0][0]+chryst[3][0]-1.9,chryst[0][1]+chryst[3][1]+2,90,0,"R1k");
o6o3(chryst[0][0]+chryst[1][0]-0.5,chryst[0][1]+chryst[1][1]-2,90,0,"15p");
o6o3(chryst[0][0]+chryst[1][0]+0.5,chryst[0][1]+chryst[1][1]-2,90,0,"15p");
o6o3(rp2040[0][0]+rp2040[3][0]+2.9,rp2040[0][1]+rp2040[3][1]+1.75,46,0,"470");
o6o3(rp2040[0][0]+rp2040[3][0]+3.8,rp2040[0][1]+rp2040[3][1]+0.4,-44,0,"LED");
o6o3(rp2040[0][0]+rp2040[3][0]+2.7,rp2040[0][1]+rp2040[3][1]-0.5,101,0,"23 24");
sot(sot523[0][0],sot523[0][1],sot523[0][2],0);
o6o3(sot523[0][0]+sot523[3][0]+0.8,sot523[0][1]+sot523[3][1]+3.4,90,0,"100k");
o6o3(sot523[0][0]+sot523[3][0]-0.1,sot523[0][1]+sot523[3][1]+3.4,90,0,"1nF");
o6o3(sot523[0][0]+sot523[3][0]-1,sot523[0][1]+sot523[3][1]+2.6,90,0,"200k");
o6o3(pico[0][0]+pico[35][0]-1.4,pico[0][1]+pico[35][1]+1.1,90,0,"200");
o6o3(pico[0][0]+pico[35][0]-1.5,pico[0][1]+pico[35][1]-1.1,90,0,"2u2");
o6o3(pico[0][0]+pico[35][0]-2.5,pico[0][1]+pico[35][1]-1.1,90,0,"1ohm");
o6o3(sot523[0][0]+sot523[3][0]-1,sot523[0][1]+sot523[3][1]+2.6,90,0,"200k");
o6o3(2.8,11.7,90,0,"100n");
o6o3(2.8,15.9,100,0,"100n");
}    

//   ****            MODULES       ****
module track (startcompx,startcompy,srotation,spinx,spiny,starttype,startdivider,startpad,endcompx,endcompy,erotation,epinx,epiny,endtype,enddivider,endpad,room) {
    color("red")translate([startcompx,startcompy,0])rotate([0,0,srotation])translate([spinx,spiny,0])cylinder(5,0.2,0.2,center=true);
    color("green")translate([endcompx,endcompy,0])rotate([0,0,erotation])translate([epinx,epiny,0])cylinder(5,0.2,0.2,center=true);
   
    
    startradius=sqrt(spinx*spinx+spiny*spiny);
    endradius=sqrt(epinx*epinx+epiny*epiny);
    
    oldangle=[90-asin(spinx/startradius),90-asin(epinx/endradius)];
    newangle=[ oldangle[0]+srotation,oldangle[1]+erotation];
    
    coords=[ [startradius*cos(newangle[0])*-(spinx/(abs(spinx))), startradius*sin(newangle[0])*(spiny/(abs(spiny)))],[endradius*cos(180-newangle[1])*+(epinx/(abs(epinx))),endradius*sin(newangle[1])*(epiny/(abs(epiny)))] ];
    
    startx=startcompx+coords[0][0];
    starty=startcompy+coords[0][1];
    endx=endcompx+coords[1][0];
    endy=endcompy+coords[1][1];
   
    startendx=startx+(endx-startx)/2;
    startendy=starty+(endy-starty)/2;
    incrementxs=((endx-startx)/2)/(startdivider);
    incrementys=((endy-starty)/2)/(startdivider);
    incrementxe=(startendx-startx)/(enddivider);
    incrementye=((endy-starty)/2)/(enddivider);
    
    midpoint=[startendx,startendy];
    curve=(startdivider);
    pointsstart = [
[startx,starty],[startx+1*incrementxs,starty+1*incrementys],[startx+2*incrementxs,starty+2*incrementys],[startx+3*incrementxs,starty+3*incrementys],[startx+4*incrementxs,starty+4*incrementys],[startx+5*incrementxs,starty+5*incrementys],[startx+6*incrementxs,starty+6*incrementys],[startx+7*incrementxs,starty+7*incrementys],[startendx,startendy]];
    pointsend = [
    [startendx,startendy],[startendx+1*incrementxe,startendy+1*incrementye], [startendx+2*incrementxe,startendy+2*incrementye], [startendx+3*incrementxe,startendy+3*incrementye],[startendx+4*incrementxe,startendy+4*incrementye],[startendx+5*incrementxe,startendy+5*incrementye],[startendx+6*incrementxe,startendy+6*incrementye],[endx,endy]];
    
    pointsHcurvestart = [
[startx,starty],[startx+1*incrementxs,starty+1*incrementys-startdivider*sin(1*90/(startdivider/2))],[startx+2*incrementxs,starty+2*incrementys-startdivider*sin(2*90/(startdivider/2))],[startx+3*incrementxs,starty+3*incrementys-startdivider*sin(3*90/(startdivider/2))],[startx+4*incrementxs,starty+4*incrementys-startdivider*sin(4*90/(startdivider/2))],[startx+5*incrementxs,starty+5*incrementys-startdivider*sin(5*90/(startdivider/2))],[startx+6*incrementxs,starty+6*incrementys-startdivider*sin(6*90/(startdivider/2))],[startx+7*incrementxs,starty+7*incrementys-startdivider*sin(7*90/(startdivider/2))],[startendx,startendy]];
    
    pointsHcurveend = [
    [startendx,startendy],[startendx+1*incrementxe+enddivider*sin(1*90/(enddivider/2)),startendy+1*incrementye], [startendx+2*incrementxe+enddivider*sin(2*90/(enddivider/2)),startendy+2*incrementye], [startendx+3*incrementxe+enddivider*sin(3*90/(enddivider/2)),startendy+3*incrementye],[startendx+4*incrementxe+enddivider*sin(4*90/(enddivider/2)),startendy+4*incrementye],[startendx+5*incrementxe+enddivider*sin(5*90/(enddivider/2)),startendy+5*incrementye],[startendx+6*incrementxe+enddivider*sin(6*90/(enddivider/2)),startendy+6*incrementye],[endx,endy]];
    
    pointsVcurvestart = [
[startx,starty],[startx+1*incrementxs+startdivider*0.2*sin(1*90/(startdivider/2)),starty+1*incrementys],[startx+2*incrementxs+startdivider*0.2*sin(2*90/(startdivider/2)),starty+2*incrementys],[startx+3*incrementxs+startdivider*0.2*sin(3*90/(startdivider/2)),starty+3*incrementys],[startx+4*incrementxs+startdivider*0.2*sin(4*90/(startdivider/2)),starty+4*incrementys],[startx+5*incrementxs-startdivider*sin(5*90/(startdivider/2)),starty+5*incrementys],[startx+6*incrementxs-startdivider*sin(6*90/(startdivider/2)),starty+6*incrementys],[startx+7*incrementxs-startdivider*sin(7*90/(startdivider/2)),starty+7*incrementys],[startendx,startendy]];
    
    pointsVcurveend = [
    [startendx,startendy],[startendx+1*incrementxe,startendy+1*incrementye+enddivider*cos(1*90/(enddivider/2))], [startendx+2*incrementxe,startendy+2*incrementye+enddivider*cos(2*90/(enddivider/2))], [startendx+3*incrementxe,startendy+3*incrementye+enddivider*cos(3*90/(enddivider/2))],[startendx+4*incrementxe,startendy+4*incrementye+enddivider*cos(4*90/(enddivider/2))],[startendx+5*incrementxe,startendy+5*incrementye+enddivider*cos(5*90/(enddivider/2))],[startendx+6*incrementxe,startendy+6*incrementye+enddivider*cos(6*90/(enddivider/2))],[endx,endy]];
//    color("chocolate")translate([pointsstart[0][0],pointsstart[0][1],0])circle(0.3);
//    for (i=[1:1:startdivider]){
//        color("red")translate([pointsstart[i][0],pointsstart[i][1]-startdivider*sin(i*90/(startdivider/2)),0])circle(0.3);
//   }
    for (k=[1:1:startdivider]){
            if (starttype==0){
                updowntest1=pointsstart[k][1]-pointsstart[k-1][1];
            translate([pointsstart[k][0]+(pointsstart[k-1][0]-pointsstart[k][0])/2,pointsstart[k][1]+(pointsstart[k-1][1]-pointsstart[k][1])/2,1])rotate([0,0,90+(updowntest1/(abs(updowntest1)))*asin((pointsstart[k-1][0]-pointsstart[k][0])/sqrt((pointsstart[k-1][0]-pointsstart[k][0])*(pointsstart[k-1][0]-pointsstart[k][0])+(pointsstart[k-1][1]-pointsstart[k][1])*(pointsstart[k-1][1]-pointsstart[k][1])))])square([sqrt((pointsstart[k-1][0]-pointsstart[k][0])*(pointsstart[k-1][0]-pointsstart[k][0])+(pointsstart[k-1][1]-pointsstart[k][1])*(pointsstart[k-1][1]-pointsstart[k][1])),trace+room*clearance],center=true);
            
        }           
            }
    for (l=[1:1:enddivider-1]){
            if (endtype==0){
                updowntest2=pointsend[l][1]-pointsend[l-1][1];
               translate([pointsend[l][0]+(pointsend[l-1][0]-pointsend[l][0])/2,pointsend[l][1]+(pointsend[l-1][1]-pointsend[l][1])/2,1])rotate([0,0,90+(updowntest2/(abs(updowntest2)))*asin((pointsend[l-1][0]-pointsend[l][0])/sqrt((pointsend[l-1][0]-pointsend[l][0])*(pointsend[l-1][0]-pointsend[l][0])+(pointsend[l-1][1]-pointsend[l][1])*(pointsend[l-1][1]-pointsend[l][1])))])square([sqrt((pointsend[l-1][0]-pointsend[l][0])*(pointsend[l-1][0]-pointsend[l][0])+(pointsend[l-1][1]-pointsend[l][1])*(pointsend[l-1][1]-pointsend[l][1])),trace+room*clearance],center=true);
          
         if(l==enddivider-1) {
             updowntest5=endy-pointsHcurveend[l][1];
             translate([endx+(pointsend[l-1][0]-endx)/2,endy+(pointsend[l-1][1]-endy)/2,1])rotate([0,0,90+(updowntest5/(abs(updowntest5)))*asin((pointsend[l-1][0]-endx)/sqrt((pointsend[l-1][0]-endx)*(pointsend[l-1][0]-endx)+(pointsend[l-1][1]-endy)*(pointsend[l-1][1]-endy)))])square([sqrt((pointsend[l-1][0]-endx)*(pointsend[l-1][0]-endx)+(pointsend[l-1][1]-endy)*(pointsend[l-1][1]-endy)),trace+room*clearance],center=true);
       
        }  }       
            }       
           for (m=[1:1:startdivider]){
            if (starttype==1){
                updowntest3=pointsHcurvestart[m][1]-pointsHcurvestart[m-1][1];
                translate([pointsHcurvestart[m][0]+(pointsHcurvestart[m-1][0]-pointsHcurvestart[m][0])/2,pointsHcurvestart[m][1]+(pointsHcurvestart[m-1][1]-pointsHcurvestart[m][1])/2,1])rotate([0,0,90+(updowntest3/(abs(updowntest3)))*asin((pointsHcurvestart[m-1][0]-pointsHcurvestart[m][0])/sqrt((pointsHcurvestart[m-1][0]-pointsHcurvestart[m][0])*(pointsHcurvestart[m-1][0]-pointsHcurvestart[m][0])+(pointsHcurvestart[m-1][1]-pointsHcurvestart[m][1])*(pointsHcurvestart[m-1][1]-pointsHcurvestart[m][1])))])square([sqrt((pointsHcurvestart[m-1][0]-pointsHcurvestart[m][0])*(pointsHcurvestart[m-1][0]-pointsHcurvestart[m][0])+(pointsHcurvestart[m-1][1]-pointsHcurvestart[m][1])*(pointsHcurvestart[m-1][1]-pointsHcurvestart[m][1]))+clearance,trace+room*clearance],center=true);

             }
             
            }
    for (n=[1:1:enddivider-1]){
            if (endtype==1){
                updowntest4=pointsHcurveend[n][1]-pointsHcurveend[n-1][1];
                translate([pointsHcurveend[n][0]+(pointsHcurveend[n-1][0]-pointsHcurveend[n][0])/2,pointsHcurveend[n][1]+(pointsHcurveend[n-1][1]-pointsHcurveend[n][1])/2,1])rotate([0,0,90+(updowntest4/(abs(updowntest4)))*asin((pointsHcurveend[n-1][0]-pointsHcurveend[n][0])/sqrt((pointsHcurveend[n-1][0]-pointsHcurveend[n][0])*(pointsHcurveend[n-1][0]-pointsHcurveend[n][0])+(pointsHcurveend[n-1][1]-pointsHcurveend[n][1])*(pointsHcurveend[n-1][1]-pointsHcurveend[n][1])))])square([sqrt((pointsHcurveend[n-1][0]-pointsHcurveend[n][0])*(pointsHcurveend[n-1][0]-pointsHcurveend[n][0])+(pointsHcurveend[n-1][1]-pointsHcurveend[n][1])*(pointsHcurveend[n-1][1]-pointsHcurveend[n][1]))+clearance,trace+room*clearance],center=true);//}
                if(n==enddivider-1) {
                 updowntest6=endy-pointsHcurveend[n][1];
                 translate([endx+(pointsHcurveend[n][0]-endx)/2,endy+(pointsHcurveend[n][1]-endy)/2,1])rotate([0,0,90+(updowntest6/(abs(updowntest6)))*asin((pointsHcurveend[n][0]-endx)/sqrt((pointsHcurveend[n][0]-endx)*(pointsHcurveend[n][0]-endx)+(pointsHcurveend[n][1]-endy)*(pointsHcurveend[n][1]-endy)))])square([sqrt((pointsHcurveend[n][0]-endx)*(pointsHcurveend[n][0]-endx)+(pointsHcurveend[n][1]-endy)*(pointsHcurveend[n][1]-endy))+clearance,trace+room*clearance],center=true);
          
             }
            }
            }  
       
       for (q=[1:1:startdivider]){
            if (starttype==2){
                updowntest3=pointsVcurvestart[q][1]-pointsVcurvestart[q-1][1];
                translate([pointsVcurvestart[q][0]+(pointsVcurvestart[q-1][0]-pointsVcurvestart[q][0])/2,pointsVcurvestart[q][1]+(pointsVcurvestart[q-1][1]-pointsVcurvestart[q][1])/2,1])rotate([0,0,90+(updowntest3/(abs(updowntest3)))*asin((pointsVcurvestart[q-1][0]-pointsVcurvestart[q][0])/sqrt((pointsVcurvestart[q-1][0]-pointsVcurvestart[q][0])*(pointsVcurvestart[q-1][0]-pointsVcurvestart[q][0])+(pointsVcurvestart[q-1][1]-pointsVcurvestart[q][1])*(pointsVcurvestart[q-1][1]-pointsVcurvestart[q][1])))])square([sqrt((pointsVcurvestart[q-1][0]-pointsVcurvestart[q][0])*(pointsVcurvestart[q-1][0]-pointsVcurvestart[q][0])+(pointsVcurvestart[q-1][1]-pointsVcurvestart[q][1])*(pointsVcurvestart[q-1][1]-pointsVcurvestart[q][1]))+clearance,trace+room*clearance],center=true);

             }
             
            }
    for (r=[1:1:enddivider-1]){
            if (endtype==2){
                updowntest4=pointsVcurveend[r][1]-pointsVcurveend[r-1][1];
                translate([pointsVcurveend[r][0]+(pointsVcurveend[r-1][0]-pointsVcurveend[r][0])/2,pointsVcurveend[r][1]+(pointsVcurveend[r-1][1]-pointsVcurveend[r][1])/2,1])rotate([0,0,90+(updowntest4/(abs(updowntest4)))*asin((pointsVcurveend[r-1][0]-pointsVcurveend[r][0])/sqrt((pointsVcurveend[r-1][0]-pointsVcurveend[r][0])*(pointsVcurveend[r-1][0]-pointsVcurveend[r][0])+(pointsVcurveend[r-1][1]-pointsVcurveend[r][1])*(pointsVcurveend[r-1][1]-pointsVcurveend[r][1])))])square([sqrt((pointsVcurveend[r-1][0]-pointsVcurveend[r][0])*(pointsVcurveend[r-1][0]-pointsVcurveend[r][0])+(pointsVcurveend[r-1][1]-pointsVcurveend[r][1])*(pointsVcurveend[r-1][1]-pointsVcurveend[r][1]))+clearance,trace+room*clearance],center=true);//}
                if(r==enddivider-1) {
                 updowntest6=endy-pointsVcurveend[r][1];
                 translate([endx+(pointsVcurveend[r][0]-endx)/2,endy+(pointsVcurveend[r][1]-endy)/2,1])rotate([0,0,90+(updowntest6/(abs(updowntest6)))*asin((pointsVcurveend[r][0]-endx)/sqrt((pointsVcurveend[r][0]-endx)*(pointsVcurveend[r][0]-endx)+(pointsVcurveend[r][1]-endy)*(pointsVcurveend[r][1]-endy)))])square([sqrt((pointsVcurveend[r][0]-endx)*(pointsVcurveend[r][0]-endx)+(pointsVcurveend[r][1]-endy)*(pointsVcurveend[r][1]-endy))+clearance,trace+room*clearance],center=true);
          
             }
            }
            }      
//    for (j=[0:1:enddivider]){     
//color("green")translate([pointsend[j][0],pointsend[j][1]+enddivider*sin(j*90/(enddivider/2)),0])circle(0.3);
//        echo(pointsend[j][0]);
//}color("chocolate")translate([pointsend[len(pointsend)-1][0],pointsend[len(pointsend)-1][1],0])circle(0.3); 
//(startx,starty,starttype,startdivider,startpad,endx,endy,endtype,enddivider,endpad,room)
difference(){
     union(){
         translate([0,0,0]) linear_extrude(2){
if (startpad==1)translate([startx,starty,0])rotate([0,0,360/(4*detail)])circle(pad+clearance*room, $fn=detail);
if (startpad==2)translate([startx,starty,0])rotate([0,0,360/(4*detail)])circle(pad*0.75+clearance*room, $fn=detail);
if (endpad==1)translate([endx,endy,0])rotate([0,0,360/(4*detail)])circle(pad+clearance*room, $fn=detail);
if (endpad==2)translate([endx,endy,0])rotate([0,0,360/(4*detail)])circle(pad*0.75+clearance*room, $fn=detail);
       }
if (startpad==0)translate([startx,starty,1])circle(trace/2+clearance*room);
if (endpad==0)translate([endx,endy,1])circle(trace/2+clearance*room);
    }
    if (startpad==1)  translate([startx,starty,0])rotate([0,0,360/(4*detail)])cylinder(15,holeradius,holeradius,center=true);
if (endpad==1) translate([endx,endy,0])rotate([0,0,360/(4*detail)])cylinder(15,holeradius,holeradius,center=true);
    if (startpad==2)  translate([startx,starty,0])rotate([0,0,360/(4*detail)])cylinder(15,holeradius,holeradius,center=true);
if (endpad==2) translate([endx,endy,0])rotate([0,0,360/(4*detail)])cylinder(15,holeradius,holeradius,center=true);
   }        
    }
    module hyp(adjacent,opposite){
     echo(sqrt(abs(adjacent)*abs(adjacent)+abs(oppocite)*abs(oppocite))); 
    }
module label(posx,posy,rotation,mirr,labeltext,size,labelfont) {
      translate([0,0,-1])linear_extrude(6){
translate([posx,posy])rotate([0,0,rotation])mirror([mirr,0,0])text(labeltext,size,font=labelfont);
}
}
module chrystal(x,y,rotation,room){
     translate([x,y,0])rotate([0,0,rotation])linear_extrude(2){
        for(i=[1:1:4])
            difference(){
   translate([chryst[i][0],chryst[i][1],0])square([1.3+room,1.1+room],center=true);
   if (room==0){translate([chryst[i][0]-0.3,chryst[i][1]-0.3,0])text(str(i),0.5);}}
        }
}
module usbb(x,y,rotation,name,value,room){
    translate([x,y,0.5])rotate([0,0,rotation])linear_extrude(1){
   translate([homebrusb[1][0],homebrusb[1][1],0])difference(){circle(pad+room); circle(holeradius);}
   translate([homebrusb[2][0],homebrusb[2][1],0])difference(){circle(pad+room); circle(holeradius);}
   translate([homebrusb[3][0],homebrusb[3][1],0])difference(){circle(pad+room); circle(holeradius);}
   translate([homebrusb[4][0],homebrusb[4][1],0])difference(){circle(pad+room); circle(holeradius);}
   if (room!=0){translate([-3.5,0.92,0])text(name,0.3);
   translate([-0.5,0.92,0])text(value,0.3);}
}}
module spiflash(x,y,rotation,name,value,room){
    translate([x,y,0])rotate([0,0,rotation])linear_extrude(2){
   translate([0,0,0])square([0.4,1.9],center=true);
   translate([spiflash16mb[1][0],spiflash16mb[1][1],0])square([1+room,0.25+room],center=true);
       translate([spiflash16mb[2][0],spiflash16mb[2][1],0])square([1+room,0.25+room],center=true);
       translate([spiflash16mb[3][0],spiflash16mb[3][1],0])square([1+room,0.25+room],center=true);
       translate([spiflash16mb[4][0],spiflash16mb[4][1],0])square([1+room,0.25+room],center=true);
       translate([spiflash16mb[5][0],spiflash16mb[5][1],0])square([1+room,0.25+room],center=true);
       translate([spiflash16mb[6][0],spiflash16mb[6][1],0])square([1+room,0.25+room],center=true);
       translate([spiflash16mb[7][0],spiflash16mb[7][1],0])square([1+room,0.25+room],center=true);
       translate([spiflash16mb[8][0],spiflash16mb[8][1],0])square([1+room,0.25+room],center=true);
   if (room!=0){translate([-0.4,-0.9,0])rotate([0,0,90])text(name,0.28);
   translate([0.7,-0.4,0])rotate([0,0,90])text(value,0.3);}
}}
module o6o3(x,y,rotation,room,value){
    translate([x,y,0])rotate([0,0,rotation])linear_extrude(2){
   translate([osixothree[1][0],osixothree[1][1],0])square(0.8+room,center=true);
   translate([osixothree[2][0],osixothree[2][1],0])square(0.8+room,center=true);
  
   if(room!=0){translate([-0.2,0.4,0])rotate([0,0,-90])text(value,0.3);}
}}
module DPAK3V3(x,y,rotation,room){
    translate([x,y,0])rotate([0,0,rotation])linear_extrude(2){
        translate([DPAK[1][0],DPAK[1][1],0])square(6.7+room*2,center=true);
        translate([DPAK[2][0],DPAK[2][1],0])square([3+room*2,1.6+room*2],center=true);
        translate([DPAK[3][0],DPAK[3][1],0])square([3+room*2,1.6+room*2],center=true);
}}

module sot(x,y,rotation,room){
   translate([x,y,0])rotate([0,0,rotation])linear_extrude(2){
        translate([sot523[1][0],sot523[1][1],0])square([0.4+room,0.51+room],center=true);
        translate([sot523[2][0],sot523[2][1],0])square([0.4+room,0.51+room],center=true);
        translate([sot523[3][0],sot523[3][1],0])square([0.4+room,0.51+room],center=true);  
}}
module rp20footprint(x,y,rotation,room){
    translate([x,y,0])rotate([0,0,rotation])linear_extrude(2){
        square(3.2+room,center=true);
        for(a=[0:90:359]){
        for (b=[2.6:-0.4:-2.6]){
            rotate([0,0,a])translate([7.26/2,b,0])square([1+room,0.2+room],center=true);
            if(room!=0){rotate([0,0,a+180])translate([7.26/2-0.7,b,0])rotate([0,0,-a+180])translate([-0.1,-0.1,0])text(str((a/90)*14+((b+2.6)/0.4)+1),0.15);}
        }
    }
    translate([-7.26/2,7.26/2,0])circle(0.3+room);
    }
}

module border(){
 translate([0,0,1])difference(){
cube([width+3*frame,heigth+3*frame,0.2],center=true);
cube([width-frame,heigth-frame,4],center=true);
}  
}

module copperclad (){
translate([0,0,1])color("black")linear_extrude(0.1)polygon([[21/2,51/2],[21/2,-51/2],[-21/2,-51/2],[-21/2,51/2]]);  
}
